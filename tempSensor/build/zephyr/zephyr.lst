
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

int __weak z_clock_device_ctrl(struct device *device,
				 u32_t ctrl_command, void *context)
{
	return 0;
}
       0:	20000a18 	.word	0x20000a18
Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
}
       4:	00001a21 	.word	0x00001a21
       8:	00001a75 	.word	0x00001a75
       c:	000018b1 	.word	0x000018b1
      10:	000018b1 	.word	0x000018b1
      14:	000018b1 	.word	0x000018b1
      18:	000018b1 	.word	0x000018b1
      1c:	000018b1 	.word	0x000018b1
      20:	000018b1 	.word	0x000018b1
      24:	000018b1 	.word	0x000018b1
      28:	000018b1 	.word	0x000018b1
      2c:	00001529 	.word	0x00001529
      30:	000018b1 	.word	0x000018b1
      34:	000018b1 	.word	0x000018b1
      38:	000014e5 	.word	0x000014e5
      3c:	000018b1 	.word	0x000018b1

00000040 <_irq_vector_table>:
      40:	000019e5 000019e5 000019e5 000019e5     ................
      50:	000019e5 000019e5 000019e5 000019e5     ................
      60:	000019e5 000019e5 000019e5 000019e5     ................
      70:	000019e5 000019e5 000019e5 000019e5     ................
      80:	000019e5 000019e5 000019e5 000019e5     ................
      90:	000019e5 000019e5 000019e5 000019e5     ................
      a0:	000019e5 000019e5 000019e5 000019e5     ................
      b0:	000019e5 000019e5 000019e5 000019e5     ................
      c0:	000019e5 000019e5 000019e5 000019e5     ................
      d0:	000019e5 000019e5 000019e5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001261 00000000 00001845     ....a.......E...
      ec:	00000000 00001845 00000000 00001845     ....E.......E...
      fc:	00000000 00001845 00000000 00001845     ....E.......E...
     10c:	00000000 00001cc9 00000000 00001845     ............E...
     11c:	00000000 00001845 00000000 00001845     ....E.......E...
     12c:	00000000 00001845 00000000 00001845     ....E.......E...
     13c:	00000000 00001845 00000000 00001845     ....E.......E...
     14c:	00000000 00001845 00000000 00001845     ....E.......E...
     15c:	00000000 00001845 00000000 0000139d     ....E...........
     16c:	00000000 00001845 00000000 00001845     ....E.......E...
     17c:	00000000 00001845 00000000 00001845     ....E.......E...
     18c:	00000000 00001845 00000000 00001845     ....E.......E...
     19c:	00000000 00001845 00000000 00001845     ....E.......E...
     1ac:	00000000 00001845 00000000 00001845     ....E.......E...
     1bc:	00000000 00001845 00000000 00001845     ....E.......E...
     1cc:	00000000 00001845 00000000 00001845     ....E.......E...
     1dc:	00000000 00001845 00000000 00001845     ....E.......E...
     1ec:	00000000 00001845 00000000 00001845     ....E.......E...
     1fc:	00000000 00001845 00000000 00001845     ....E.......E...
     20c:	00000000 00001845                       ....E...

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9bf 	b.w	5b4 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f84d 	bl	2e4 <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <__aeabi_ldivmod+0x84>
     260:	f000 f840 	bl	2e4 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f82f 	bl	2e4 <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f821 	bl	2e4 <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b974 	b.w	5b4 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f806 	bl	2e4 <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__udivmoddi4>:
     2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2e8:	9e08      	ldr	r6, [sp, #32]
     2ea:	4604      	mov	r4, r0
     2ec:	4688      	mov	r8, r1
     2ee:	2b00      	cmp	r3, #0
     2f0:	f040 8085 	bne.w	3fe <__udivmoddi4+0x11a>
     2f4:	428a      	cmp	r2, r1
     2f6:	4615      	mov	r5, r2
     2f8:	d948      	bls.n	38c <__udivmoddi4+0xa8>
     2fa:	fab2 f282 	clz	r2, r2
     2fe:	b14a      	cbz	r2, 314 <__udivmoddi4+0x30>
     300:	f1c2 0720 	rsb	r7, r2, #32
     304:	fa01 f302 	lsl.w	r3, r1, r2
     308:	fa20 f707 	lsr.w	r7, r0, r7
     30c:	4095      	lsls	r5, r2
     30e:	ea47 0803 	orr.w	r8, r7, r3
     312:	4094      	lsls	r4, r2
     314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     318:	0c23      	lsrs	r3, r4, #16
     31a:	fbb8 f7fe 	udiv	r7, r8, lr
     31e:	fa1f fc85 	uxth.w	ip, r5
     322:	fb0e 8817 	mls	r8, lr, r7, r8
     326:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     32a:	fb07 f10c 	mul.w	r1, r7, ip
     32e:	4299      	cmp	r1, r3
     330:	d909      	bls.n	346 <__udivmoddi4+0x62>
     332:	18eb      	adds	r3, r5, r3
     334:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     338:	f080 80e3 	bcs.w	502 <CONFIG_MAIN_STACK_SIZE+0x102>
     33c:	4299      	cmp	r1, r3
     33e:	f240 80e0 	bls.w	502 <CONFIG_MAIN_STACK_SIZE+0x102>
     342:	3f02      	subs	r7, #2
     344:	442b      	add	r3, r5
     346:	1a5b      	subs	r3, r3, r1
     348:	b2a4      	uxth	r4, r4
     34a:	fbb3 f0fe 	udiv	r0, r3, lr
     34e:	fb0e 3310 	mls	r3, lr, r0, r3
     352:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     356:	fb00 fc0c 	mul.w	ip, r0, ip
     35a:	45a4      	cmp	ip, r4
     35c:	d909      	bls.n	372 <__udivmoddi4+0x8e>
     35e:	192c      	adds	r4, r5, r4
     360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     364:	f080 80cb 	bcs.w	4fe <CONFIG_MAIN_STACK_SIZE+0xfe>
     368:	45a4      	cmp	ip, r4
     36a:	f240 80c8 	bls.w	4fe <CONFIG_MAIN_STACK_SIZE+0xfe>
     36e:	3802      	subs	r0, #2
     370:	442c      	add	r4, r5
     372:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     376:	eba4 040c 	sub.w	r4, r4, ip
     37a:	2700      	movs	r7, #0
     37c:	b11e      	cbz	r6, 386 <__udivmoddi4+0xa2>
     37e:	40d4      	lsrs	r4, r2
     380:	2300      	movs	r3, #0
     382:	e9c6 4300 	strd	r4, r3, [r6]
     386:	4639      	mov	r1, r7
     388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38c:	2a00      	cmp	r2, #0
     38e:	d053      	beq.n	438 <CONFIG_MAIN_STACK_SIZE+0x38>
     390:	fab2 f282 	clz	r2, r2
     394:	2a00      	cmp	r2, #0
     396:	f040 80b6 	bne.w	506 <CONFIG_MAIN_STACK_SIZE+0x106>
     39a:	1b49      	subs	r1, r1, r5
     39c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3a0:	fa1f f885 	uxth.w	r8, r5
     3a4:	2701      	movs	r7, #1
     3a6:	fbb1 fcfe 	udiv	ip, r1, lr
     3aa:	0c23      	lsrs	r3, r4, #16
     3ac:	fb0e 111c 	mls	r1, lr, ip, r1
     3b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3b4:	fb08 f10c 	mul.w	r1, r8, ip
     3b8:	4299      	cmp	r1, r3
     3ba:	d907      	bls.n	3cc <__udivmoddi4+0xe8>
     3bc:	18eb      	adds	r3, r5, r3
     3be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3c2:	d202      	bcs.n	3ca <__udivmoddi4+0xe6>
     3c4:	4299      	cmp	r1, r3
     3c6:	f200 80ec 	bhi.w	5a2 <CONFIG_MAIN_STACK_SIZE+0x1a2>
     3ca:	4684      	mov	ip, r0
     3cc:	1a59      	subs	r1, r3, r1
     3ce:	b2a3      	uxth	r3, r4
     3d0:	fbb1 f0fe 	udiv	r0, r1, lr
     3d4:	fb0e 1410 	mls	r4, lr, r0, r1
     3d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     3dc:	fb08 f800 	mul.w	r8, r8, r0
     3e0:	45a0      	cmp	r8, r4
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x110>
     3e4:	192c      	adds	r4, r5, r4
     3e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x10e>
     3ec:	45a0      	cmp	r8, r4
     3ee:	f200 80dc 	bhi.w	5aa <CONFIG_MAIN_STACK_SIZE+0x1aa>
     3f2:	4618      	mov	r0, r3
     3f4:	eba4 0408 	sub.w	r4, r4, r8
     3f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     3fc:	e7be      	b.n	37c <__udivmoddi4+0x98>
     3fe:	428b      	cmp	r3, r1
     400:	d908      	bls.n	414 <CONFIG_MAIN_STACK_SIZE+0x14>
     402:	2e00      	cmp	r6, #0
     404:	d078      	beq.n	4f8 <CONFIG_MAIN_STACK_SIZE+0xf8>
     406:	2700      	movs	r7, #0
     408:	e9c6 0100 	strd	r0, r1, [r6]
     40c:	4638      	mov	r0, r7
     40e:	4639      	mov	r1, r7
     410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     414:	fab3 f783 	clz	r7, r3
     418:	b97f      	cbnz	r7, 43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     41a:	428b      	cmp	r3, r1
     41c:	d302      	bcc.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     41e:	4282      	cmp	r2, r0
     420:	f200 80bd 	bhi.w	59e <CONFIG_MAIN_STACK_SIZE+0x19e>
     424:	1a84      	subs	r4, r0, r2
     426:	eb61 0303 	sbc.w	r3, r1, r3
     42a:	2001      	movs	r0, #1
     42c:	4698      	mov	r8, r3
     42e:	2e00      	cmp	r6, #0
     430:	d0a9      	beq.n	386 <__udivmoddi4+0xa2>
     432:	e9c6 4800 	strd	r4, r8, [r6]
     436:	e7a6      	b.n	386 <__udivmoddi4+0xa2>
     438:	deff      	udf	#255	; 0xff
     43a:	f1c7 0520 	rsb	r5, r7, #32
     43e:	40bb      	lsls	r3, r7
     440:	fa22 fc05 	lsr.w	ip, r2, r5
     444:	ea4c 0c03 	orr.w	ip, ip, r3
     448:	fa01 f407 	lsl.w	r4, r1, r7
     44c:	fa20 f805 	lsr.w	r8, r0, r5
     450:	fa21 f305 	lsr.w	r3, r1, r5
     454:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     458:	ea48 0404 	orr.w	r4, r8, r4
     45c:	fbb3 f9fe 	udiv	r9, r3, lr
     460:	0c21      	lsrs	r1, r4, #16
     462:	fb0e 3319 	mls	r3, lr, r9, r3
     466:	fa1f f88c 	uxth.w	r8, ip
     46a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     46e:	fb09 fa08 	mul.w	sl, r9, r8
     472:	459a      	cmp	sl, r3
     474:	fa02 f207 	lsl.w	r2, r2, r7
     478:	fa00 f107 	lsl.w	r1, r0, r7
     47c:	d90b      	bls.n	496 <CONFIG_MAIN_STACK_SIZE+0x96>
     47e:	eb1c 0303 	adds.w	r3, ip, r3
     482:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     486:	f080 8088 	bcs.w	59a <CONFIG_MAIN_STACK_SIZE+0x19a>
     48a:	459a      	cmp	sl, r3
     48c:	f240 8085 	bls.w	59a <CONFIG_MAIN_STACK_SIZE+0x19a>
     490:	f1a9 0902 	sub.w	r9, r9, #2
     494:	4463      	add	r3, ip
     496:	eba3 030a 	sub.w	r3, r3, sl
     49a:	b2a4      	uxth	r4, r4
     49c:	fbb3 f0fe 	udiv	r0, r3, lr
     4a0:	fb0e 3310 	mls	r3, lr, r0, r3
     4a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     4a8:	fb00 f808 	mul.w	r8, r0, r8
     4ac:	45a0      	cmp	r8, r4
     4ae:	d908      	bls.n	4c2 <CONFIG_MAIN_STACK_SIZE+0xc2>
     4b0:	eb1c 0404 	adds.w	r4, ip, r4
     4b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4b8:	d26b      	bcs.n	592 <CONFIG_MAIN_STACK_SIZE+0x192>
     4ba:	45a0      	cmp	r8, r4
     4bc:	d969      	bls.n	592 <CONFIG_MAIN_STACK_SIZE+0x192>
     4be:	3802      	subs	r0, #2
     4c0:	4464      	add	r4, ip
     4c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4c6:	eba4 0408 	sub.w	r4, r4, r8
     4ca:	fba0 8902 	umull	r8, r9, r0, r2
     4ce:	454c      	cmp	r4, r9
     4d0:	46c6      	mov	lr, r8
     4d2:	464b      	mov	r3, r9
     4d4:	d354      	bcc.n	580 <CONFIG_MAIN_STACK_SIZE+0x180>
     4d6:	d051      	beq.n	57c <CONFIG_MAIN_STACK_SIZE+0x17c>
     4d8:	2e00      	cmp	r6, #0
     4da:	d069      	beq.n	5b0 <CONFIG_MAIN_STACK_SIZE+0x1b0>
     4dc:	ebb1 020e 	subs.w	r2, r1, lr
     4e0:	eb64 0403 	sbc.w	r4, r4, r3
     4e4:	fa04 f505 	lsl.w	r5, r4, r5
     4e8:	fa22 f307 	lsr.w	r3, r2, r7
     4ec:	40fc      	lsrs	r4, r7
     4ee:	431d      	orrs	r5, r3
     4f0:	e9c6 5400 	strd	r5, r4, [r6]
     4f4:	2700      	movs	r7, #0
     4f6:	e746      	b.n	386 <__udivmoddi4+0xa2>
     4f8:	4637      	mov	r7, r6
     4fa:	4630      	mov	r0, r6
     4fc:	e743      	b.n	386 <__udivmoddi4+0xa2>
     4fe:	4618      	mov	r0, r3
     500:	e737      	b.n	372 <__udivmoddi4+0x8e>
     502:	4607      	mov	r7, r0
     504:	e71f      	b.n	346 <__udivmoddi4+0x62>
     506:	f1c2 0320 	rsb	r3, r2, #32
     50a:	fa20 f703 	lsr.w	r7, r0, r3
     50e:	4095      	lsls	r5, r2
     510:	fa01 f002 	lsl.w	r0, r1, r2
     514:	fa21 f303 	lsr.w	r3, r1, r3
     518:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     51c:	4338      	orrs	r0, r7
     51e:	0c01      	lsrs	r1, r0, #16
     520:	fbb3 f7fe 	udiv	r7, r3, lr
     524:	fa1f f885 	uxth.w	r8, r5
     528:	fb0e 3317 	mls	r3, lr, r7, r3
     52c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     530:	fb07 f308 	mul.w	r3, r7, r8
     534:	428b      	cmp	r3, r1
     536:	fa04 f402 	lsl.w	r4, r4, r2
     53a:	d907      	bls.n	54c <CONFIG_MAIN_STACK_SIZE+0x14c>
     53c:	1869      	adds	r1, r5, r1
     53e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     542:	d228      	bcs.n	596 <CONFIG_MAIN_STACK_SIZE+0x196>
     544:	428b      	cmp	r3, r1
     546:	d926      	bls.n	596 <CONFIG_MAIN_STACK_SIZE+0x196>
     548:	3f02      	subs	r7, #2
     54a:	4429      	add	r1, r5
     54c:	1acb      	subs	r3, r1, r3
     54e:	b281      	uxth	r1, r0
     550:	fbb3 f0fe 	udiv	r0, r3, lr
     554:	fb0e 3310 	mls	r3, lr, r0, r3
     558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     55c:	fb00 f308 	mul.w	r3, r0, r8
     560:	428b      	cmp	r3, r1
     562:	d907      	bls.n	574 <CONFIG_MAIN_STACK_SIZE+0x174>
     564:	1869      	adds	r1, r5, r1
     566:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     56a:	d210      	bcs.n	58e <CONFIG_MAIN_STACK_SIZE+0x18e>
     56c:	428b      	cmp	r3, r1
     56e:	d90e      	bls.n	58e <CONFIG_MAIN_STACK_SIZE+0x18e>
     570:	3802      	subs	r0, #2
     572:	4429      	add	r1, r5
     574:	1ac9      	subs	r1, r1, r3
     576:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     57a:	e714      	b.n	3a6 <__udivmoddi4+0xc2>
     57c:	4541      	cmp	r1, r8
     57e:	d2ab      	bcs.n	4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>
     580:	ebb8 0e02 	subs.w	lr, r8, r2
     584:	eb69 020c 	sbc.w	r2, r9, ip
     588:	3801      	subs	r0, #1
     58a:	4613      	mov	r3, r2
     58c:	e7a4      	b.n	4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>
     58e:	4660      	mov	r0, ip
     590:	e7f0      	b.n	574 <CONFIG_MAIN_STACK_SIZE+0x174>
     592:	4618      	mov	r0, r3
     594:	e795      	b.n	4c2 <CONFIG_MAIN_STACK_SIZE+0xc2>
     596:	4667      	mov	r7, ip
     598:	e7d8      	b.n	54c <CONFIG_MAIN_STACK_SIZE+0x14c>
     59a:	4681      	mov	r9, r0
     59c:	e77b      	b.n	496 <CONFIG_MAIN_STACK_SIZE+0x96>
     59e:	4638      	mov	r0, r7
     5a0:	e745      	b.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     5a2:	f1ac 0c02 	sub.w	ip, ip, #2
     5a6:	442b      	add	r3, r5
     5a8:	e710      	b.n	3cc <__udivmoddi4+0xe8>
     5aa:	3802      	subs	r0, #2
     5ac:	442c      	add	r4, r5
     5ae:	e721      	b.n	3f4 <__udivmoddi4+0x110>
     5b0:	4637      	mov	r7, r6
     5b2:	e6e8      	b.n	386 <__udivmoddi4+0xa2>

000005b4 <__aeabi_idiv0>:
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop

000005b8 <gpio_pin_configure>:
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     5b8:	6843      	ldr	r3, [r0, #4]
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
     5ba:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
     5bc:	681c      	ldr	r4, [r3, #0]
     5be:	4613      	mov	r3, r2
     5c0:	46a4      	mov	ip, r4
     5c2:	460a      	mov	r2, r1
	return gpio_config(port, GPIO_ACCESS_BY_PIN, pin, flags);
}
     5c4:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
     5c6:	2100      	movs	r1, #0
     5c8:	4760      	bx	ip

000005ca <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
     5ca:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
     5cc:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
     5ce:	685c      	ldr	r4, [r3, #4]
     5d0:	4613      	mov	r3, r2
     5d2:	46a4      	mov	ip, r4
     5d4:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
     5d6:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
     5d8:	2100      	movs	r1, #0
     5da:	4760      	bx	ip

000005dc <ds18b20_send_bit>:
// Send one bit over 1-wire
void ds18b20_send_bit(u8_t bit)
{
	unsigned int key;

	if (bit == 1) {
     5dc:	2801      	cmp	r0, #1
{
     5de:	b570      	push	{r4, r5, r6, lr}
     5e0:	4605      	mov	r5, r0
     5e2:	4c1e      	ldr	r4, [pc, #120]	; (65c <ds18b20_send_bit+0x80>)
	if (bit == 1) {
     5e4:	d11e      	bne.n	624 <ds18b20_send_bit+0x48>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     5e6:	f04f 0320 	mov.w	r3, #32
     5ea:	f3ef 8611 	mrs	r6, BASEPRI
     5ee:	f383 8811 	msr	BASEPRI, r3
		// Send a 1
		key = irq_lock();
		gpio_pin_configure(dev, PIN, GPIO_DIR_OUT);
     5f2:	210b      	movs	r1, #11
     5f4:	4602      	mov	r2, r0
     5f6:	6820      	ldr	r0, [r4, #0]
     5f8:	f7ff ffde 	bl	5b8 <gpio_pin_configure>
		gpio_pin_write(dev, PIN, 0);
     5fc:	2200      	movs	r2, #0
     5fe:	210b      	movs	r1, #11
     600:	6820      	ldr	r0, [r4, #0]
     602:	f7ff ffe2 	bl	5ca <gpio_pin_write>
		k_busy_wait(5); // 5
     606:	2005      	movs	r0, #5
     608:	f002 f966 	bl	28d8 <k_busy_wait>
		gpio_pin_write(dev, PIN, 1);
     60c:	462a      	mov	r2, r5
     60e:	210b      	movs	r1, #11
     610:	6820      	ldr	r0, [r4, #0]
     612:	f7ff ffda 	bl	5ca <gpio_pin_write>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     616:	f386 8811 	msr	BASEPRI, r6
		irq_unlock(key);
		k_busy_wait(85); // 80
     61a:	2055      	movs	r0, #85	; 0x55
		k_busy_wait(85); // 85
		gpio_pin_write(dev, PIN, 1);
		irq_unlock(key);
		k_busy_wait(5); // 0
	}
}
     61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_busy_wait(5); // 0
     620:	f002 b95a 	b.w	28d8 <k_busy_wait>
	__asm__ volatile(
     624:	f04f 0320 	mov.w	r3, #32
     628:	f3ef 8511 	mrs	r5, BASEPRI
     62c:	f383 8811 	msr	BASEPRI, r3
		gpio_pin_configure(dev, PIN, GPIO_DIR_OUT);
     630:	2201      	movs	r2, #1
     632:	210b      	movs	r1, #11
     634:	6820      	ldr	r0, [r4, #0]
     636:	f7ff ffbf 	bl	5b8 <gpio_pin_configure>
		gpio_pin_write(dev, PIN, 0);
     63a:	2200      	movs	r2, #0
     63c:	210b      	movs	r1, #11
     63e:	6820      	ldr	r0, [r4, #0]
     640:	f7ff ffc3 	bl	5ca <gpio_pin_write>
		k_busy_wait(85); // 85
     644:	2055      	movs	r0, #85	; 0x55
     646:	f002 f947 	bl	28d8 <k_busy_wait>
		gpio_pin_write(dev, PIN, 1);
     64a:	2201      	movs	r2, #1
     64c:	210b      	movs	r1, #11
     64e:	6820      	ldr	r0, [r4, #0]
     650:	f7ff ffbb 	bl	5ca <gpio_pin_write>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     654:	f385 8811 	msr	BASEPRI, r5
		k_busy_wait(5); // 0
     658:	2005      	movs	r0, #5
     65a:	e7df      	b.n	61c <ds18b20_send_bit+0x40>
     65c:	20000538 	.word	0x20000538

00000660 <ds18b20_recv_bit>:

// Receive one bit over 1-wire
u8_t ds18b20_recv_bit(void)
{
     660:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t value = 0;
     662:	2500      	movs	r5, #0
     664:	9501      	str	r5, [sp, #4]
	__asm__ volatile(
     666:	f04f 0320 	mov.w	r3, #32
     66a:	f3ef 8611 	mrs	r6, BASEPRI
     66e:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();
	gpio_pin_configure(dev, PIN, GPIO_DIR_OUT);
     672:	4c16      	ldr	r4, [pc, #88]	; (6cc <ds18b20_recv_bit+0x6c>)
     674:	2201      	movs	r2, #1
     676:	210b      	movs	r1, #11
     678:	6820      	ldr	r0, [r4, #0]
     67a:	f7ff ff9d 	bl	5b8 <gpio_pin_configure>
	gpio_pin_write(dev, PIN, 0);
     67e:	462a      	mov	r2, r5
     680:	210b      	movs	r1, #11
     682:	6820      	ldr	r0, [r4, #0]
     684:	f7ff ffa1 	bl	5ca <gpio_pin_write>
	k_busy_wait(3);
     688:	2003      	movs	r0, #3
     68a:	f002 f925 	bl	28d8 <k_busy_wait>
	gpio_pin_write(dev, PIN, 1);
     68e:	2201      	movs	r2, #1
     690:	210b      	movs	r1, #11
     692:	6820      	ldr	r0, [r4, #0]
     694:	f7ff ff99 	bl	5ca <gpio_pin_write>
	k_busy_wait(15); // 15
     698:	200f      	movs	r0, #15
     69a:	f002 f91d 	bl	28d8 <k_busy_wait>
	gpio_pin_configure(dev, PIN, GPIO_DIR_IN);
     69e:	462a      	mov	r2, r5
     6a0:	210b      	movs	r1, #11
     6a2:	6820      	ldr	r0, [r4, #0]
     6a4:	f7ff ff88 	bl	5b8 <gpio_pin_configure>
	gpio_pin_read(dev, PIN, &value);
     6a8:	6820      	ldr	r0, [r4, #0]
	return api->read(port, access_op, pin, value);
     6aa:	6843      	ldr	r3, [r0, #4]
     6ac:	220b      	movs	r2, #11
     6ae:	689c      	ldr	r4, [r3, #8]
     6b0:	4629      	mov	r1, r5
     6b2:	ab01      	add	r3, sp, #4
     6b4:	47a0      	blx	r4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     6b6:	f386 8811 	msr	BASEPRI, r6
	irq_unlock(key);
	k_busy_wait(53); // 15
     6ba:	2035      	movs	r0, #53	; 0x35
     6bc:	f002 f90c 	bl	28d8 <k_busy_wait>

	return value & 0x01;
}
     6c0:	9801      	ldr	r0, [sp, #4]
     6c2:	f000 0001 	and.w	r0, r0, #1
     6c6:	b002      	add	sp, #8
     6c8:	bd70      	pop	{r4, r5, r6, pc}
     6ca:	bf00      	nop
     6cc:	20000538 	.word	0x20000538

000006d0 <ds18b20_send_byte>:

// Send one byte over 1-wire
void ds18b20_send_byte(u8_t data)
{
     6d0:	b538      	push	{r3, r4, r5, lr}
     6d2:	4605      	mov	r5, r0
     6d4:	2400      	movs	r4, #0
	u8_t i;
    u8_t x;


    for(i = 0; i < 8; i++){
		x = data >> i;
     6d6:	fa45 f004 	asr.w	r0, r5, r4
		x &= 0x01;
		ds18b20_send_bit(x);
     6da:	f000 0001 	and.w	r0, r0, #1
     6de:	3401      	adds	r4, #1
     6e0:	f7ff ff7c 	bl	5dc <ds18b20_send_bit>
    for(i = 0; i < 8; i++){
     6e4:	2c08      	cmp	r4, #8
     6e6:	d1f6      	bne.n	6d6 <ds18b20_send_byte+0x6>
    }

	// Wait between bytes
	k_busy_wait(100);
     6e8:	2064      	movs	r0, #100	; 0x64
}
     6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_busy_wait(100);
     6ee:	f002 b8f3 	b.w	28d8 <k_busy_wait>

000006f2 <ds18b20_recv_byte>:

// Receive one byte over 1-wire
u8_t ds18b20_recv_byte(void)
{
     6f2:	b570      	push	{r4, r5, r6, lr}
	u32_t i;
    u8_t data = 0;
     6f4:	2400      	movs	r4, #0

    for (i = 0; i < 8; i++) {
     6f6:	4625      	mov	r5, r4
      	if(ds18b20_recv_bit()) {
	  		data |= (0x01 << i);
     6f8:	2601      	movs	r6, #1
      	if(ds18b20_recv_bit()) {
     6fa:	f7ff ffb1 	bl	660 <ds18b20_recv_bit>
     6fe:	b118      	cbz	r0, 708 <ds18b20_recv_byte+0x16>
	  		data |= (0x01 << i);
     700:	fa06 f305 	lsl.w	r3, r6, r5
     704:	431c      	orrs	r4, r3
     706:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 8; i++) {
     708:	3501      	adds	r5, #1
     70a:	2d08      	cmp	r5, #8
     70c:	d1f5      	bne.n	6fa <ds18b20_recv_byte+0x8>
		}
	}

    return(data);
}
     70e:	4620      	mov	r0, r4
     710:	bd70      	pop	{r4, r5, r6, pc}
	...

00000714 <ds18b20_reset_pulse>:

// Send 1-wire reset pulse
u8_t ds18b20_reset_pulse()
{
     714:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t value = 0;
     716:	2400      	movs	r4, #0
     718:	9401      	str	r4, [sp, #4]
	__asm__ volatile(
     71a:	f04f 0320 	mov.w	r3, #32
     71e:	f3ef 8611 	mrs	r6, BASEPRI
     722:	f383 8811 	msr	BASEPRI, r3
	u32_t result = 0;
	unsigned int key;

	key = irq_lock();
	gpio_pin_configure(dev, PIN, GPIO_DIR_OUT);
     726:	4d15      	ldr	r5, [pc, #84]	; (77c <ds18b20_reset_pulse+0x68>)
     728:	2201      	movs	r2, #1
     72a:	210b      	movs	r1, #11
     72c:	6828      	ldr	r0, [r5, #0]
     72e:	f7ff ff43 	bl	5b8 <gpio_pin_configure>
	gpio_pin_write(dev, PIN, 0);
     732:	4622      	mov	r2, r4
     734:	210b      	movs	r1, #11
     736:	6828      	ldr	r0, [r5, #0]
     738:	f7ff ff47 	bl	5ca <gpio_pin_write>
	k_busy_wait(480);
     73c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
     740:	f002 f8ca 	bl	28d8 <k_busy_wait>
	gpio_pin_configure(dev, PIN, GPIO_DIR_IN);
     744:	4622      	mov	r2, r4
     746:	210b      	movs	r1, #11
     748:	6828      	ldr	r0, [r5, #0]
     74a:	f7ff ff35 	bl	5b8 <gpio_pin_configure>
	k_busy_wait(70);
     74e:	2046      	movs	r0, #70	; 0x46
     750:	f002 f8c2 	bl	28d8 <k_busy_wait>
	gpio_pin_read(dev, PIN, &value);
     754:	6828      	ldr	r0, [r5, #0]
     756:	6843      	ldr	r3, [r0, #4]
     758:	4621      	mov	r1, r4
     75a:	689d      	ldr	r5, [r3, #8]
     75c:	220b      	movs	r2, #11
     75e:	ab01      	add	r3, sp, #4
     760:	47a8      	blx	r5
	result = value == 0 ? 1 : 0;
     762:	9c01      	ldr	r4, [sp, #4]
     764:	fab4 f484 	clz	r4, r4
     768:	0964      	lsrs	r4, r4, #5
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     76a:	f386 8811 	msr	BASEPRI, r6
	irq_unlock(key);
	k_busy_wait(410);
     76e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
     772:	f002 f8b1 	bl	28d8 <k_busy_wait>

	return result;
}
     776:	4620      	mov	r0, r4
     778:	b002      	add	sp, #8
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	20000538 	.word	0x20000538

00000780 <ds18b20_get_temp>:

// Trigger a DS18B20 temperature measurement and receive the result over 1-wire
s16_t ds18b20_get_temp()
{
     780:	b538      	push	{r3, r4, r5, lr}
	u8_t check;
    u8_t tempMSB=0;
	u8_t tempLSB=0;

    check=ds18b20_reset_pulse();
     782:	f7ff ffc7 	bl	714 <ds18b20_reset_pulse>

    if(check==0) {
     786:	b920      	cbnz	r0, 792 <ds18b20_get_temp+0x12>
		printk("Device not detected\n");
     788:	4813      	ldr	r0, [pc, #76]	; (7d8 <ds18b20_get_temp+0x58>)
     78a:	f000 fa05 	bl	b98 <printk>
		return 0;
     78e:	2000      	movs	r0, #0

	// Convert to degrees C temperature, dropping everything to the right
	// of the decimal point (NOTE: you might want to retain this additional
	// accuracy and add FP support to publish FP data to thingsboard.io!!)
	return (s16_t)((((u16_t)tempMSB << 8) + (u16_t)tempLSB) >> 4);
}
     790:	bd38      	pop	{r3, r4, r5, pc}
	ds18b20_send_byte(0xCC);
     792:	20cc      	movs	r0, #204	; 0xcc
     794:	f7ff ff9c 	bl	6d0 <ds18b20_send_byte>
	ds18b20_send_byte(0x44);
     798:	2044      	movs	r0, #68	; 0x44
     79a:	f7ff ff99 	bl	6d0 <ds18b20_send_byte>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     79e:	f240 20ee 	movw	r0, #750	; 0x2ee
     7a2:	f002 f80f 	bl	27c4 <_impl_k_sleep>
	check=ds18b20_reset_pulse();
     7a6:	f7ff ffb5 	bl	714 <ds18b20_reset_pulse>
    if(check==0) {
     7aa:	2800      	cmp	r0, #0
     7ac:	d0ec      	beq.n	788 <ds18b20_get_temp+0x8>
	ds18b20_send_byte(0xCC);
     7ae:	20cc      	movs	r0, #204	; 0xcc
     7b0:	f7ff ff8e 	bl	6d0 <ds18b20_send_byte>
	ds18b20_send_byte(0xBE);
     7b4:	20be      	movs	r0, #190	; 0xbe
     7b6:	f7ff ff8b 	bl	6d0 <ds18b20_send_byte>
	tempLSB=ds18b20_recv_byte();
     7ba:	f7ff ff9a 	bl	6f2 <ds18b20_recv_byte>
     7be:	4604      	mov	r4, r0
	tempMSB=ds18b20_recv_byte();
     7c0:	f7ff ff97 	bl	6f2 <ds18b20_recv_byte>
     7c4:	4605      	mov	r5, r0
	check=ds18b20_reset_pulse();
     7c6:	f7ff ffa5 	bl	714 <ds18b20_reset_pulse>
	if(check==0) {
     7ca:	2800      	cmp	r0, #0
     7cc:	d0dc      	beq.n	788 <ds18b20_get_temp+0x8>
	return (s16_t)((((u16_t)tempMSB << 8) + (u16_t)tempLSB) >> 4);
     7ce:	eb04 2005 	add.w	r0, r4, r5, lsl #8
     7d2:	f340 100f 	sbfx	r0, r0, #4, #16
     7d6:	e7db      	b.n	790 <ds18b20_get_temp+0x10>
     7d8:	00002cdc 	.word	0x00002cdc

000007dc <main>:

void main(void)
{
     7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t temperature;

	// LED setup
	printk("Starting...\n");
     7de:	481a      	ldr	r0, [pc, #104]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
	dev1 = device_get_binding(LED_PORT); // get binding for LED
     7e0:	4c1a      	ldr	r4, [pc, #104]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
	printk("Starting...\n");
     7e2:	f000 f9d9 	bl	b98 <printk>
	dev1 = device_get_binding(LED_PORT); // get binding for LED
     7e6:	481a      	ldr	r0, [pc, #104]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     7e8:	f001 fc5c 	bl	20a4 <device_get_binding>
	gpio_pin_configure(dev1, LED, GPIO_DIR_OUT); // configure LED
     7ec:	2201      	movs	r2, #1
     7ee:	2111      	movs	r1, #17
	dev1 = device_get_binding(LED_PORT); // get binding for LED
     7f0:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(dev1, LED, GPIO_DIR_OUT); // configure LED
     7f2:	f7ff fee1 	bl	5b8 <gpio_pin_configure>

	// temperature
	printk("Preparing DS18B20\n");
     7f6:	4817      	ldr	r0, [pc, #92]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     7f8:	f000 f9ce 	bl	b98 <printk>
	dev = device_get_binding(PORT);
     7fc:	4814      	ldr	r0, [pc, #80]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     7fe:	f001 fc51 	bl	20a4 <device_get_binding>
     802:	4b15      	ldr	r3, [pc, #84]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)

	if (gpio_pin_configure(dev, PIN, GPIO_DIR_IN)) {
     804:	2200      	movs	r2, #0
     806:	210b      	movs	r1, #11
	dev = device_get_binding(PORT);
     808:	6018      	str	r0, [r3, #0]
	if (gpio_pin_configure(dev, PIN, GPIO_DIR_IN)) {
     80a:	f7ff fed5 	bl	5b8 <gpio_pin_configure>
     80e:	b110      	cbz	r0, 816 <CONFIG_ISR_STACK_SIZE+0x16>
		printk("Pin configure failed\n");
     810:	4812      	ldr	r0, [pc, #72]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     812:	f000 f9c1 	bl	b98 <printk>
	while (true) {

		// delay between samples
		k_sleep(SLEEP_TIME);

		printk("\nSampling ... ");
     816:	4f12      	ldr	r7, [pc, #72]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
		}
		else{
			gpio_pin_write(dev1, LED, 1); // turn off
		}

		printk("current temperature: %i degrees C\n", temperature);
     818:	4e12      	ldr	r6, [pc, #72]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     81a:	f241 3088 	movw	r0, #5000	; 0x1388
     81e:	f001 ffd1 	bl	27c4 <_impl_k_sleep>
		printk("\nSampling ... ");
     822:	4638      	mov	r0, r7
     824:	f000 f9b8 	bl	b98 <printk>
		temperature = ds18b20_get_temp();
     828:	f7ff ffaa 	bl	780 <ds18b20_get_temp>
     82c:	b285      	uxth	r5, r0
		if (temperature > TEMP_THRESHOLD){
     82e:	2d18      	cmp	r5, #24
			gpio_pin_write(dev1, LED, 0); //turn on
     830:	bf8c      	ite	hi
     832:	2200      	movhi	r2, #0
			gpio_pin_write(dev1, LED, 1); // turn off
     834:	2201      	movls	r2, #1
     836:	2111      	movs	r1, #17
     838:	6820      	ldr	r0, [r4, #0]
     83a:	f7ff fec6 	bl	5ca <gpio_pin_write>
		printk("current temperature: %i degrees C\n", temperature);
     83e:	4629      	mov	r1, r5
     840:	4630      	mov	r0, r6
     842:	f000 f9a9 	bl	b98 <printk>
		k_sleep(SLEEP_TIME);
     846:	e7e8      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     848:	00002cf1 	.word	0x00002cf1
     84c:	2000053c 	.word	0x2000053c
     850:	00002cfe 	.word	0x00002cfe
     854:	00002d05 	.word	0x00002d05
     858:	20000538 	.word	0x20000538
     85c:	00002d18 	.word	0x00002d18
     860:	00002d2e 	.word	0x00002d2e
     864:	00002d3d 	.word	0x00002d3d

00000868 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     868:	b508      	push	{r3, lr}
     86a:	4604      	mov	r4, r0
     86c:	4608      	mov	r0, r1
     86e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     870:	461a      	mov	r2, r3
     872:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     874:	f001 ffe6 	bl	2844 <_impl_k_current_get>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     878:	f001 f890 	bl	199c <_impl_k_thread_abort>

0000087c <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     87c:	2000      	movs	r0, #0
     87e:	4770      	bx	lr

00000880 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     880:	680b      	ldr	r3, [r1, #0]
     882:	3301      	adds	r3, #1
     884:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     886:	4b01      	ldr	r3, [pc, #4]	; (88c <char_out+0xc>)
     888:	681b      	ldr	r3, [r3, #0]
     88a:	4718      	bx	r3
     88c:	20001358 	.word	0x20001358

00000890 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     894:	b085      	sub	sp, #20
     896:	469b      	mov	fp, r3
     898:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     89a:	f8df a090 	ldr.w	sl, [pc, #144]	; 92c <_printk_dec_ulong+0x9c>
     89e:	2c01      	cmp	r4, #1
     8a0:	bfb8      	it	lt
     8a2:	2401      	movlt	r4, #1
     8a4:	2b01      	cmp	r3, #1
     8a6:	bf0c      	ite	eq
     8a8:	2330      	moveq	r3, #48	; 0x30
     8aa:	2320      	movne	r3, #32
     8ac:	4615      	mov	r5, r2
     8ae:	4680      	mov	r8, r0
     8b0:	4689      	mov	r9, r1
     8b2:	9401      	str	r4, [sp, #4]
     8b4:	9302      	str	r3, [sp, #8]
     8b6:	2601      	movs	r6, #1
     8b8:	270a      	movs	r7, #10
     8ba:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     8bc:	f10a 0401 	add.w	r4, sl, #1
     8c0:	b90a      	cbnz	r2, 8c6 <_printk_dec_ulong+0x36>
     8c2:	45aa      	cmp	sl, r5
     8c4:	d21f      	bcs.n	906 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     8c6:	fbb5 f0f4 	udiv	r0, r5, r4
     8ca:	4649      	mov	r1, r9
     8cc:	3030      	adds	r0, #48	; 0x30
     8ce:	47c0      	blx	r8
			digits++;
     8d0:	3601      	adds	r6, #1
			found_largest_digit = 1;
     8d2:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     8d4:	3f01      	subs	r7, #1
	while (pos >= 9) {
     8d6:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     8d8:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     8dc:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     8e0:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     8e4:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     8e8:	d1e8      	bne.n	8bc <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     8ea:	4649      	mov	r1, r9
     8ec:	f105 0030 	add.w	r0, r5, #48	; 0x30
     8f0:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     8f2:	f1bb 0f03 	cmp.w	fp, #3
     8f6:	d103      	bne.n	900 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     8f8:	9b01      	ldr	r3, [sp, #4]
     8fa:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     8fc:	2c00      	cmp	r4, #0
     8fe:	dc0f      	bgt.n	920 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     900:	b005      	add	sp, #20
     902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     906:	9b01      	ldr	r3, [sp, #4]
     908:	42bb      	cmp	r3, r7
     90a:	dbe3      	blt.n	8d4 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     90c:	f1bb 0f02 	cmp.w	fp, #2
     910:	d8e0      	bhi.n	8d4 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     912:	4649      	mov	r1, r9
     914:	9802      	ldr	r0, [sp, #8]
     916:	9203      	str	r2, [sp, #12]
			digits++;
     918:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     91a:	47c0      	blx	r8
			digits++;
     91c:	9a03      	ldr	r2, [sp, #12]
     91e:	e7d9      	b.n	8d4 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     920:	4649      	mov	r1, r9
     922:	2020      	movs	r0, #32
     924:	47c0      	blx	r8
     926:	3c01      	subs	r4, #1
     928:	e7e8      	b.n	8fc <_printk_dec_ulong+0x6c>
     92a:	bf00      	nop
     92c:	3b9ac9ff 	.word	0x3b9ac9ff

00000930 <__printk_hook_install>:
	_char_out = fn;
     930:	4b01      	ldr	r3, [pc, #4]	; (938 <__printk_hook_install+0x8>)
     932:	6018      	str	r0, [r3, #0]
}
     934:	4770      	bx	lr
     936:	bf00      	nop
     938:	20001358 	.word	0x20001358

0000093c <_vprintk>:
{
     93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     940:	b089      	sub	sp, #36	; 0x24
     942:	461c      	mov	r4, r3
	int long_ctr = 0;
     944:	f04f 0900 	mov.w	r9, #0
     948:	1e53      	subs	r3, r2, #1
{
     94a:	4605      	mov	r5, r0
     94c:	460e      	mov	r6, r1
     94e:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     950:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     954:	464f      	mov	r7, r9
			might_format = 0;
     956:	f04f 0b00 	mov.w	fp, #0
				break;
     95a:	e007      	b.n	96c <_vprintk+0x30>
		if (!might_format) {
     95c:	f1bb 0f00 	cmp.w	fp, #0
     960:	d10d      	bne.n	97e <_vprintk+0x42>
			if (*fmt != '%') {
     962:	2825      	cmp	r0, #37	; 0x25
     964:	f000 80fc 	beq.w	b60 <_vprintk+0x224>
				out((int)*fmt, ctx);
     968:	4631      	mov	r1, r6
     96a:	47a8      	blx	r5
	while (*fmt) {
     96c:	9b04      	ldr	r3, [sp, #16]
     96e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     972:	9304      	str	r3, [sp, #16]
     974:	2800      	cmp	r0, #0
     976:	d1f1      	bne.n	95c <_vprintk+0x20>
}
     978:	b009      	add	sp, #36	; 0x24
     97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     97e:	2864      	cmp	r0, #100	; 0x64
     980:	d05e      	beq.n	a40 <_vprintk+0x104>
     982:	d819      	bhi.n	9b8 <_vprintk+0x7c>
     984:	2839      	cmp	r0, #57	; 0x39
     986:	d80a      	bhi.n	99e <_vprintk+0x62>
     988:	2831      	cmp	r0, #49	; 0x31
     98a:	d24d      	bcs.n	a28 <_vprintk+0xec>
     98c:	282d      	cmp	r0, #45	; 0x2d
     98e:	f000 80ee 	beq.w	b6e <_vprintk+0x232>
     992:	2830      	cmp	r0, #48	; 0x30
     994:	d03c      	beq.n	a10 <_vprintk+0xd4>
     996:	2825      	cmp	r0, #37	; 0x25
     998:	d107      	bne.n	9aa <_vprintk+0x6e>
				out((int)'%', ctx);
     99a:	4631      	mov	r1, r6
     99c:	e0de      	b.n	b5c <_vprintk+0x220>
			switch (*fmt) {
     99e:	2858      	cmp	r0, #88	; 0x58
     9a0:	f000 8082 	beq.w	aa8 <_vprintk+0x16c>
     9a4:	2863      	cmp	r0, #99	; 0x63
     9a6:	f000 80d6 	beq.w	b56 <_vprintk+0x21a>
				out((int)'%', ctx);
     9aa:	4631      	mov	r1, r6
     9ac:	2025      	movs	r0, #37	; 0x25
     9ae:	47a8      	blx	r5
				out((int)*fmt, ctx);
     9b0:	9b04      	ldr	r3, [sp, #16]
     9b2:	4631      	mov	r1, r6
     9b4:	7818      	ldrb	r0, [r3, #0]
     9b6:	e0d1      	b.n	b5c <_vprintk+0x220>
			switch (*fmt) {
     9b8:	2870      	cmp	r0, #112	; 0x70
     9ba:	d06c      	beq.n	a96 <_vprintk+0x15a>
     9bc:	d806      	bhi.n	9cc <_vprintk+0x90>
     9be:	2869      	cmp	r0, #105	; 0x69
     9c0:	d03e      	beq.n	a40 <_vprintk+0x104>
     9c2:	286c      	cmp	r0, #108	; 0x6c
     9c4:	d039      	beq.n	a3a <_vprintk+0xfe>
     9c6:	2868      	cmp	r0, #104	; 0x68
     9c8:	d0d0      	beq.n	96c <_vprintk+0x30>
     9ca:	e7ee      	b.n	9aa <_vprintk+0x6e>
     9cc:	2875      	cmp	r0, #117	; 0x75
     9ce:	d054      	beq.n	a7a <_vprintk+0x13e>
     9d0:	d81a      	bhi.n	a08 <_vprintk+0xcc>
     9d2:	2873      	cmp	r0, #115	; 0x73
     9d4:	d1e9      	bne.n	9aa <_vprintk+0x6e>
				char *s = va_arg(ap, char *);
     9d6:	f854 2b04 	ldr.w	r2, [r4], #4
				while (*s)
     9da:	4693      	mov	fp, r2
     9dc:	46da      	mov	sl, fp
     9de:	f81b 0b01 	ldrb.w	r0, [fp], #1
     9e2:	2800      	cmp	r0, #0
     9e4:	f040 80b2 	bne.w	b4c <_vprintk+0x210>
				if (padding == PAD_SPACE_AFTER) {
     9e8:	2f03      	cmp	r7, #3
     9ea:	f040 80c4 	bne.w	b76 <_vprintk+0x23a>
					int remaining = min_width - (s - start);
     9ee:	ebaa 0a02 	sub.w	sl, sl, r2
     9f2:	eba8 0a0a 	sub.w	sl, r8, sl
					while (remaining-- > 0) {
     9f6:	f1ba 0f00 	cmp.w	sl, #0
     9fa:	ddac      	ble.n	956 <_vprintk+0x1a>
						out(' ', ctx);
     9fc:	4631      	mov	r1, r6
     9fe:	2020      	movs	r0, #32
     a00:	47a8      	blx	r5
     a02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     a06:	e7f6      	b.n	9f6 <_vprintk+0xba>
			switch (*fmt) {
     a08:	2878      	cmp	r0, #120	; 0x78
     a0a:	d04d      	beq.n	aa8 <_vprintk+0x16c>
     a0c:	287a      	cmp	r0, #122	; 0x7a
     a0e:	e7db      	b.n	9c8 <_vprintk+0x8c>
				if (min_width < 0 && padding == PAD_NONE) {
     a10:	f1b8 0f00 	cmp.w	r8, #0
     a14:	da0b      	bge.n	a2e <_vprintk+0xf2>
     a16:	2f00      	cmp	r7, #0
     a18:	f000 80ab 	beq.w	b72 <_vprintk+0x236>
					min_width = *fmt - '0';
     a1c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     a20:	2f00      	cmp	r7, #0
     a22:	bf08      	it	eq
     a24:	2702      	moveq	r7, #2
     a26:	e7a1      	b.n	96c <_vprintk+0x30>
				if (min_width < 0) {
     a28:	f1b8 0f00 	cmp.w	r8, #0
     a2c:	dbf6      	blt.n	a1c <_vprintk+0xe0>
					min_width = 10 * min_width + *fmt - '0';
     a2e:	220a      	movs	r2, #10
     a30:	fb02 0808 	mla	r8, r2, r8, r0
     a34:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     a38:	e7f2      	b.n	a20 <_vprintk+0xe4>
				long_ctr++;
     a3a:	f109 0901 	add.w	r9, r9, #1
     a3e:	e795      	b.n	96c <_vprintk+0x30>
				if (long_ctr < 2) {
     a40:	f1b9 0f01 	cmp.w	r9, #1
					d = (long)va_arg(ap, long long);
     a44:	bfc5      	ittet	gt
     a46:	3407      	addgt	r4, #7
     a48:	f024 0407 	bicgt.w	r4, r4, #7
					d = va_arg(ap, long);
     a4c:	f854 ab04 	ldrle.w	sl, [r4], #4
					d = (long)va_arg(ap, long long);
     a50:	f854 ab08 	ldrgt.w	sl, [r4], #8
				if (d < 0) {
     a54:	f1ba 0f00 	cmp.w	sl, #0
     a58:	da06      	bge.n	a68 <_vprintk+0x12c>
					out((int)'-', ctx);
     a5a:	4631      	mov	r1, r6
     a5c:	202d      	movs	r0, #45	; 0x2d
     a5e:	47a8      	blx	r5
					d = -d;
     a60:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
     a64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     a68:	f8cd 8000 	str.w	r8, [sp]
     a6c:	463b      	mov	r3, r7
     a6e:	4652      	mov	r2, sl
     a70:	4631      	mov	r1, r6
     a72:	4628      	mov	r0, r5
     a74:	f7ff ff0c 	bl	890 <_printk_dec_ulong>
     a78:	e76d      	b.n	956 <_vprintk+0x1a>
				if (long_ctr < 2) {
     a7a:	f1b9 0f01 	cmp.w	r9, #1
					u = (unsigned long)va_arg(ap,
     a7e:	bfc5      	ittet	gt
     a80:	3407      	addgt	r4, #7
     a82:	f024 0407 	bicgt.w	r4, r4, #7
					u = va_arg(ap, unsigned long);
     a86:	f854 2b04 	ldrle.w	r2, [r4], #4
					u = (unsigned long)va_arg(ap,
     a8a:	f854 2b08 	ldrgt.w	r2, [r4], #8
				_printk_dec_ulong(out, ctx, u, padding,
     a8e:	f8cd 8000 	str.w	r8, [sp]
     a92:	463b      	mov	r3, r7
     a94:	e7ec      	b.n	a70 <_vprintk+0x134>
				  out('0', ctx);
     a96:	4631      	mov	r1, r6
     a98:	2030      	movs	r0, #48	; 0x30
     a9a:	47a8      	blx	r5
				  out('x', ctx);
     a9c:	4631      	mov	r1, r6
     a9e:	2078      	movs	r0, #120	; 0x78
     aa0:	47a8      	blx	r5
				  min_width = 8;
     aa2:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
     aa6:	2701      	movs	r7, #1
				if (long_ctr < 2) {
     aa8:	f1b9 0f01 	cmp.w	r9, #1
					x = (unsigned long)va_arg(ap,
     aac:	bfc5      	ittet	gt
     aae:	3407      	addgt	r4, #7
     ab0:	f024 0407 	bicgt.w	r4, r4, #7
					x = va_arg(ap, unsigned long);
     ab4:	f854 3b04 	ldrle.w	r3, [r4], #4
					x = (unsigned long)va_arg(ap,
     ab8:	f854 3b08 	ldrgt.w	r3, [r4], #8
     abc:	9305      	str	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     abe:	2208      	movs	r2, #8
	int digits = 0;
     ac0:	f04f 0a00 	mov.w	sl, #0
	int found_largest_digit = 0;
     ac4:	f8cd a018 	str.w	sl, [sp, #24]
	int size = sizeof(num) * 2;
     ac8:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     aca:	1e4b      	subs	r3, r1, #1
     acc:	0098      	lsls	r0, r3, #2
     ace:	9303      	str	r3, [sp, #12]
     ad0:	9b05      	ldr	r3, [sp, #20]
     ad2:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     ad6:	f010 000f 	ands.w	r0, r0, #15
     ada:	d109      	bne.n	af0 <_vprintk+0x1b4>
     adc:	9b06      	ldr	r3, [sp, #24]
     ade:	b90b      	cbnz	r3, ae4 <_vprintk+0x1a8>
     ae0:	2901      	cmp	r1, #1
     ae2:	d123      	bne.n	b2c <_vprintk+0x1f0>
			nibble += nibble > 9 ? 87 : 48;
     ae4:	2130      	movs	r1, #48	; 0x30
     ae6:	e007      	b.n	af8 <_vprintk+0x1bc>
			found_largest_digit = 1;
     ae8:	f8cd b018 	str.w	fp, [sp, #24]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     aec:	9903      	ldr	r1, [sp, #12]
     aee:	e7ec      	b.n	aca <_vprintk+0x18e>
			nibble += nibble > 9 ? 87 : 48;
     af0:	2809      	cmp	r0, #9
     af2:	bf8c      	ite	hi
     af4:	2157      	movhi	r1, #87	; 0x57
     af6:	2130      	movls	r1, #48	; 0x30
     af8:	4408      	add	r0, r1
			out((int)nibble, ctx);
     afa:	b240      	sxtb	r0, r0
     afc:	4631      	mov	r1, r6
     afe:	9206      	str	r2, [sp, #24]
     b00:	47a8      	blx	r5
	for (; size; size--) {
     b02:	9b03      	ldr	r3, [sp, #12]
     b04:	9a06      	ldr	r2, [sp, #24]
			digits++;
     b06:	f10a 0a01 	add.w	sl, sl, #1
	for (; size; size--) {
     b0a:	2b00      	cmp	r3, #0
     b0c:	d1ec      	bne.n	ae8 <_vprintk+0x1ac>
	if (padding == PAD_SPACE_AFTER) {
     b0e:	2f03      	cmp	r7, #3
     b10:	f47f af21 	bne.w	956 <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
     b14:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
     b18:	f1ba 0f00 	cmp.w	sl, #0
     b1c:	f77f af1b 	ble.w	956 <_vprintk+0x1a>
			out(' ', ctx);
     b20:	4631      	mov	r1, r6
     b22:	2020      	movs	r0, #32
     b24:	47a8      	blx	r5
     b26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     b2a:	e7f5      	b.n	b18 <_vprintk+0x1dc>
		if (remaining-- <= min_width) {
     b2c:	1e53      	subs	r3, r2, #1
     b2e:	4590      	cmp	r8, r2
     b30:	9307      	str	r3, [sp, #28]
     b32:	db04      	blt.n	b3e <_vprintk+0x202>
			if (padding == PAD_ZERO_BEFORE) {
     b34:	2f01      	cmp	r7, #1
     b36:	d104      	bne.n	b42 <_vprintk+0x206>
				out('0', ctx);
     b38:	4631      	mov	r1, r6
     b3a:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     b3c:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
     b3e:	9a07      	ldr	r2, [sp, #28]
     b40:	e7d4      	b.n	aec <_vprintk+0x1b0>
			} else if (padding == PAD_SPACE_BEFORE) {
     b42:	2f02      	cmp	r7, #2
     b44:	d1fb      	bne.n	b3e <_vprintk+0x202>
				out(' ', ctx);
     b46:	4631      	mov	r1, r6
     b48:	2020      	movs	r0, #32
     b4a:	e7f7      	b.n	b3c <_vprintk+0x200>
					out((int)(*s++), ctx);
     b4c:	4631      	mov	r1, r6
     b4e:	9203      	str	r2, [sp, #12]
     b50:	47a8      	blx	r5
     b52:	9a03      	ldr	r2, [sp, #12]
     b54:	e742      	b.n	9dc <_vprintk+0xa0>
				out(c, ctx);
     b56:	f854 0b04 	ldr.w	r0, [r4], #4
     b5a:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
     b5c:	47a8      	blx	r5
				break;
     b5e:	e6fa      	b.n	956 <_vprintk+0x1a>
				long_ctr = 0;
     b60:	46d9      	mov	r9, fp
				padding = PAD_NONE;
     b62:	465f      	mov	r7, fp
				min_width = -1;
     b64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
     b68:	f04f 0b01 	mov.w	fp, #1
     b6c:	e6fe      	b.n	96c <_vprintk+0x30>
				padding = PAD_SPACE_AFTER;
     b6e:	2703      	movs	r7, #3
     b70:	e6fc      	b.n	96c <_vprintk+0x30>
					padding = PAD_ZERO_BEFORE;
     b72:	2701      	movs	r7, #1
     b74:	e6fa      	b.n	96c <_vprintk+0x30>
			might_format = 0;
     b76:	4683      	mov	fp, r0
     b78:	e6f8      	b.n	96c <_vprintk+0x30>
	...

00000b7c <vprintk>:
{
     b7c:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     b7e:	2300      	movs	r3, #0
     b80:	9301      	str	r3, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
     b82:	4602      	mov	r2, r0
     b84:	460b      	mov	r3, r1
     b86:	4803      	ldr	r0, [pc, #12]	; (b94 <vprintk+0x18>)
     b88:	a901      	add	r1, sp, #4
     b8a:	f7ff fed7 	bl	93c <_vprintk>
}
     b8e:	b003      	add	sp, #12
     b90:	f85d fb04 	ldr.w	pc, [sp], #4
     b94:	00000881 	.word	0x00000881

00000b98 <printk>:
{
     b98:	b40f      	push	{r0, r1, r2, r3}
     b9a:	b507      	push	{r0, r1, r2, lr}
     b9c:	a904      	add	r1, sp, #16
     b9e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     ba2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
     ba4:	f7ff ffea 	bl	b7c <vprintk>
}
     ba8:	b003      	add	sp, #12
     baa:	f85d eb04 	ldr.w	lr, [sp], #4
     bae:	b004      	add	sp, #16
     bb0:	4770      	bx	lr

00000bb2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP, 1);
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE, 0);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_LINKER_ORPHAN_SECTION_WARN, 1);

GEN_ABS_SYM_END
     bb2:	4770      	bx	lr

00000bb4 <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
     bb4:	b510      	push	{r4, lr}
	__asm__ volatile(
     bb6:	f04f 0320 	mov.w	r3, #32
     bba:	f3ef 8411 	mrs	r4, BASEPRI
     bbe:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     bc2:	f000 f84f 	bl	c64 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     bc6:	4a08      	ldr	r2, [pc, #32]	; (be8 <nordicsemi_nrf52_init+0x34>)
     bc8:	2301      	movs	r3, #1
     bca:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bd2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     bd6:	4b05      	ldr	r3, [pc, #20]	; (bec <nordicsemi_nrf52_init+0x38>)
     bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     bdc:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     bde:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     be0:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     be4:	2000      	movs	r0, #0
     be6:	bd10      	pop	{r4, pc}
     be8:	4001e000 	.word	0x4001e000
     bec:	e000ed00 	.word	0xe000ed00

00000bf0 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     bf0:	4b0c      	ldr	r3, [pc, #48]	; (c24 <errata_108+0x34>)
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	2b06      	cmp	r3, #6
     bf6:	d110      	bne.n	c1a <errata_108+0x2a>
     bf8:	4b0b      	ldr	r3, [pc, #44]	; (c28 <errata_108+0x38>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	071a      	lsls	r2, r3, #28
     bfe:	d10c      	bne.n	c1a <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     c00:	4b0a      	ldr	r3, [pc, #40]	; (c2c <errata_108+0x3c>)
     c02:	6818      	ldr	r0, [r3, #0]
     c04:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     c08:	2b30      	cmp	r3, #48	; 0x30
     c0a:	d008      	beq.n	c1e <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     c0c:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     c10:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     c14:	4258      	negs	r0, r3
     c16:	4158      	adcs	r0, r3
     c18:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     c1a:	2000      	movs	r0, #0
     c1c:	4770      	bx	lr
            return true;
     c1e:	2001      	movs	r0, #1
}
     c20:	4770      	bx	lr
     c22:	bf00      	nop
     c24:	f0000fe0 	.word	0xf0000fe0
     c28:	f0000fe4 	.word	0xf0000fe4
     c2c:	f0000fe8 	.word	0xf0000fe8

00000c30 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     c30:	4b09      	ldr	r3, [pc, #36]	; (c58 <errata_16+0x28>)
     c32:	781b      	ldrb	r3, [r3, #0]
     c34:	2b06      	cmp	r3, #6
     c36:	d10c      	bne.n	c52 <errata_16+0x22>
     c38:	4b08      	ldr	r3, [pc, #32]	; (c5c <errata_16+0x2c>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	071a      	lsls	r2, r3, #28
     c3e:	d108      	bne.n	c52 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     c40:	4b07      	ldr	r3, [pc, #28]	; (c60 <errata_16+0x30>)
     c42:	6818      	ldr	r0, [r3, #0]
     c44:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     c48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     c4c:	4258      	negs	r0, r3
     c4e:	4158      	adcs	r0, r3
     c50:	4770      	bx	lr
            return true;
        }
    }

    return false;
     c52:	2000      	movs	r0, #0
}
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	f0000fe0 	.word	0xf0000fe0
     c5c:	f0000fe4 	.word	0xf0000fe4
     c60:	f0000fe8 	.word	0xf0000fe8

00000c64 <SystemInit>:
{
     c64:	b508      	push	{r3, lr}
    if (errata_12()){
     c66:	f7ff ffc3 	bl	bf0 <errata_108>
     c6a:	b128      	cbz	r0, c78 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     c6c:	4b78      	ldr	r3, [pc, #480]	; (e50 <SystemInit+0x1ec>)
     c6e:	4a79      	ldr	r2, [pc, #484]	; (e54 <SystemInit+0x1f0>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	f3c3 2304 	ubfx	r3, r3, #8, #5
     c76:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     c78:	f7ff ffda 	bl	c30 <errata_16>
     c7c:	b110      	cbz	r0, c84 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     c7e:	4b76      	ldr	r3, [pc, #472]	; (e58 <SystemInit+0x1f4>)
     c80:	4a76      	ldr	r2, [pc, #472]	; (e5c <SystemInit+0x1f8>)
     c82:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     c84:	f7ff ffb4 	bl	bf0 <errata_108>
     c88:	b128      	cbz	r0, c96 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     c8a:	4b75      	ldr	r3, [pc, #468]	; (e60 <SystemInit+0x1fc>)
     c8c:	4a75      	ldr	r2, [pc, #468]	; (e64 <SystemInit+0x200>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	f3c3 3342 	ubfx	r3, r3, #13, #3
     c94:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     c96:	f7ff ffcb 	bl	c30 <errata_16>
     c9a:	b120      	cbz	r0, ca6 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     c9c:	4a72      	ldr	r2, [pc, #456]	; (e68 <SystemInit+0x204>)
     c9e:	68d3      	ldr	r3, [r2, #12]
     ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     ca4:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     ca6:	f7ff ffa3 	bl	bf0 <errata_108>
     caa:	b140      	cbz	r0, cbe <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     cb0:	2200      	movs	r2, #0
     cb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     cb6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     cba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     cbe:	f7ff ffb7 	bl	c30 <errata_16>
     cc2:	b110      	cbz	r0, cca <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     cc4:	4b69      	ldr	r3, [pc, #420]	; (e6c <SystemInit+0x208>)
     cc6:	2203      	movs	r2, #3
     cc8:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     cca:	f7ff ffb1 	bl	c30 <errata_16>
     cce:	b140      	cbz	r0, ce2 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     cd0:	4b67      	ldr	r3, [pc, #412]	; (e70 <SystemInit+0x20c>)
     cd2:	2205      	movs	r2, #5
     cd4:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     cd6:	2201      	movs	r2, #1
     cd8:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     cda:	2200      	movs	r2, #0
     cdc:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     cde:	223f      	movs	r2, #63	; 0x3f
     ce0:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     ce2:	4b64      	ldr	r3, [pc, #400]	; (e74 <SystemInit+0x210>)
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	2b06      	cmp	r3, #6
     ce8:	d150      	bne.n	d8c <SystemInit+0x128>
     cea:	4b63      	ldr	r3, [pc, #396]	; (e78 <SystemInit+0x214>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	0719      	lsls	r1, r3, #28
     cf0:	d14c      	bne.n	d8c <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     cf2:	4b62      	ldr	r3, [pc, #392]	; (e7c <SystemInit+0x218>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     cfa:	2b50      	cmp	r3, #80	; 0x50
     cfc:	d146      	bne.n	d8c <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     d02:	4b5f      	ldr	r3, [pc, #380]	; (e80 <SystemInit+0x21c>)
     d04:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     d08:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     d0c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     d10:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     d14:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     d18:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     d1c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     d20:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     d24:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     d28:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     d2c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     d30:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     d34:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     d38:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     d3c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     d40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     d44:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     d48:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     d4c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     d50:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     d54:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     d58:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     d5c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     d60:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     d64:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     d68:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     d6c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     d70:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     d74:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     d78:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     d7c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     d80:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     d84:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     d88:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     d8c:	f7ff ff30 	bl	bf0 <errata_108>
     d90:	b128      	cbz	r0, d9e <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     d92:	4b3c      	ldr	r3, [pc, #240]	; (e84 <SystemInit+0x220>)
     d94:	4a3c      	ldr	r2, [pc, #240]	; (e88 <SystemInit+0x224>)
     d96:	681b      	ldr	r3, [r3, #0]
     d98:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     d9c:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     d9e:	f7ff ff27 	bl	bf0 <errata_108>
     da2:	b148      	cbz	r0, db8 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     da8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     dac:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     dae:	bf44      	itt	mi
     db0:	f06f 0201 	mvnmi.w	r2, #1
     db4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     db8:	4b34      	ldr	r3, [pc, #208]	; (e8c <SystemInit+0x228>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	2b06      	cmp	r3, #6
     dbe:	d108      	bne.n	dd2 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     dc0:	4b33      	ldr	r3, [pc, #204]	; (e90 <SystemInit+0x22c>)
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     dc6:	bf01      	itttt	eq
     dc8:	4a32      	ldreq	r2, [pc, #200]	; (e94 <SystemInit+0x230>)
     dca:	6813      	ldreq	r3, [r2, #0]
     dcc:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     dd0:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     dd2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     dd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     dda:	2a00      	cmp	r2, #0
     ddc:	db03      	blt.n	de6 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     dde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     de2:	2b00      	cmp	r3, #0
     de4:	da2f      	bge.n	e46 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     de6:	4b2c      	ldr	r3, [pc, #176]	; (e98 <SystemInit+0x234>)
     de8:	2201      	movs	r2, #1
     dea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     dee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     df2:	2a00      	cmp	r2, #0
     df4:	d0fb      	beq.n	dee <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     df6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     dfa:	2115      	movs	r1, #21
     dfc:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     e00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     e04:	2a00      	cmp	r2, #0
     e06:	d0fb      	beq.n	e00 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     e08:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     e0c:	2215      	movs	r2, #21
     e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     e12:	4b21      	ldr	r3, [pc, #132]	; (e98 <SystemInit+0x234>)
     e14:	461a      	mov	r2, r3
     e16:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     e1a:	2900      	cmp	r1, #0
     e1c:	d0fb      	beq.n	e16 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     e1e:	2100      	movs	r1, #0
     e20:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     e24:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     e28:	2b00      	cmp	r3, #0
     e2a:	d0fb      	beq.n	e24 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     e2c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     e30:	491a      	ldr	r1, [pc, #104]	; (e9c <SystemInit+0x238>)
     e32:	4b1b      	ldr	r3, [pc, #108]	; (ea0 <SystemInit+0x23c>)
     e34:	68ca      	ldr	r2, [r1, #12]
     e36:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     e3a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     e3c:	60cb      	str	r3, [r1, #12]
     e3e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     e42:	bf00      	nop
     e44:	e7fd      	b.n	e42 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     e46:	4b17      	ldr	r3, [pc, #92]	; (ea4 <SystemInit+0x240>)
     e48:	4a17      	ldr	r2, [pc, #92]	; (ea8 <SystemInit+0x244>)
     e4a:	601a      	str	r2, [r3, #0]
}
     e4c:	bd08      	pop	{r3, pc}
     e4e:	bf00      	nop
     e50:	10000324 	.word	0x10000324
     e54:	40013540 	.word	0x40013540
     e58:	4007c074 	.word	0x4007c074
     e5c:	baadf00d 	.word	0xbaadf00d
     e60:	10000244 	.word	0x10000244
     e64:	4000053c 	.word	0x4000053c
     e68:	e000edf0 	.word	0xe000edf0
     e6c:	400005a0 	.word	0x400005a0
     e70:	40005610 	.word	0x40005610
     e74:	f0000fe0 	.word	0xf0000fe0
     e78:	f0000fe4 	.word	0xf0000fe4
     e7c:	f0000fe8 	.word	0xf0000fe8
     e80:	4000c000 	.word	0x4000c000
     e84:	10000258 	.word	0x10000258
     e88:	40000ee4 	.word	0x40000ee4
     e8c:	10000130 	.word	0x10000130
     e90:	10000134 	.word	0x10000134
     e94:	4000173c 	.word	0x4000173c
     e98:	4001e000 	.word	0x4001e000
     e9c:	e000ed00 	.word	0xe000ed00
     ea0:	05fa0004 	.word	0x05fa0004
     ea4:	2000137c 	.word	0x2000137c
     ea8:	03d09000 	.word	0x03d09000

00000eac <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     eac:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
     eae:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
     eb0:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     eb2:	bf9d      	ittte	ls
     eb4:	6882      	ldrls	r2, [r0, #8]
     eb6:	18d2      	addls	r2, r2, r3
     eb8:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
     ebc:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     ec0:	bf94      	ite	ls
     ec2:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
     ec4:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
     ec6:	4770      	bx	lr

00000ec8 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
     ecc:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     ed0:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
     ed2:	1b3e      	subs	r6, r7, r4
  if (Rem > NumBytes) {
     ed4:	6840      	ldr	r0, [r0, #4]
     ed6:	4296      	cmp	r6, r2
     ed8:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     eda:	4688      	mov	r8, r1
     edc:	4414      	add	r4, r2
  if (Rem > NumBytes) {
     ede:	d904      	bls.n	eea <_WriteNoCheck+0x22>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     ee0:	f000 fe18 	bl	1b14 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
     ee4:	60ec      	str	r4, [r5, #12]
}
     ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     eea:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
     eec:	1be4      	subs	r4, r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     eee:	f000 fe11 	bl	1b14 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     ef2:	4622      	mov	r2, r4
     ef4:	eb08 0106 	add.w	r1, r8, r6
     ef8:	6868      	ldr	r0, [r5, #4]
     efa:	e7f1      	b.n	ee0 <_WriteNoCheck+0x18>

00000efc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
     f00:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     f02:	4606      	mov	r6, r0
     f04:	4689      	mov	r9, r1
     f06:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
     f08:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     f0c:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
     f0e:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     f10:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
     f12:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     f14:	bf28      	it	cs
     f16:	18e4      	addcs	r4, r4, r3
     f18:	3c01      	subs	r4, #1
     f1a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     f1c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     f1e:	42bc      	cmp	r4, r7
     f20:	bf28      	it	cs
     f22:	463c      	movcs	r4, r7
     f24:	4294      	cmp	r4, r2
     f26:	bf28      	it	cs
     f28:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     f2a:	4649      	mov	r1, r9
     f2c:	4428      	add	r0, r5
     f2e:	4622      	mov	r2, r4
     f30:	f000 fdf0 	bl	1b14 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
     f34:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
     f36:	4425      	add	r5, r4
      WrOff = 0u;
     f38:	42ab      	cmp	r3, r5
     f3a:	bf08      	it	eq
     f3c:	2500      	moveq	r5, #0
  } while (NumBytes);
     f3e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
     f40:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
     f42:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
     f44:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
     f46:	d1e1      	bne.n	f0c <_WriteBlocking+0x10>
}
     f48:	4640      	mov	r0, r8
     f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00000f50 <_DoInit>:
static void _DoInit(void) {
     f50:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     f52:	4c11      	ldr	r4, [pc, #68]	; (f98 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
     f54:	4a11      	ldr	r2, [pc, #68]	; (f9c <_DoInit+0x4c>)
     f56:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     f58:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     f5a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
     f5e:	4b10      	ldr	r3, [pc, #64]	; (fa0 <_DoInit+0x50>)
     f60:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
     f62:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
     f68:	4a0e      	ldr	r2, [pc, #56]	; (fa4 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     f6a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
     f6c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
     f6e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     f70:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
     f72:	490d      	ldr	r1, [pc, #52]	; (fa8 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
     f74:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
     f76:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
     f78:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     f7a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
     f7c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     f7e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     f80:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     f82:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
     f84:	f000 fdb0 	bl	1ae8 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
     f88:	4908      	ldr	r1, [pc, #32]	; (fac <_DoInit+0x5c>)
     f8a:	4620      	mov	r0, r4
     f8c:	f000 fdac 	bl	1ae8 <strcpy>
  p->acID[6] = ' ';
     f90:	2320      	movs	r3, #32
     f92:	71a3      	strb	r3, [r4, #6]
}
     f94:	bd10      	pop	{r4, pc}
     f96:	bf00      	nop
     f98:	20000540 	.word	0x20000540
     f9c:	00002d73 	.word	0x00002d73
     fa0:	20000010 	.word	0x20000010
     fa4:	20000000 	.word	0x20000000
     fa8:	00002d7c 	.word	0x00002d7c
     fac:	00002d80 	.word	0x00002d80

00000fb0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     fb2:	4c18      	ldr	r4, [pc, #96]	; (1014 <SEGGER_RTT_WriteNoLock+0x64>)
     fb4:	2318      	movs	r3, #24
     fb6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     fba:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     fbe:	4425      	add	r5, r4
  switch (pRing->Flags) {
     fc0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     fc2:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     fc4:	460f      	mov	r7, r1
     fc6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
     fc8:	d011      	beq.n	fee <SEGGER_RTT_WriteNoLock+0x3e>
     fca:	b124      	cbz	r4, fd6 <SEGGER_RTT_WriteNoLock+0x26>
     fcc:	2c02      	cmp	r4, #2
     fce:	d01b      	beq.n	1008 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
     fd0:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
     fd2:	4620      	mov	r0, r4
     fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
     fd6:	4628      	mov	r0, r5
     fd8:	f7ff ff68 	bl	eac <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
     fdc:	42b0      	cmp	r0, r6
     fde:	d3f8      	bcc.n	fd2 <SEGGER_RTT_WriteNoLock+0x22>
      _WriteNoCheck(pRing, pData, NumBytes);
     fe0:	4632      	mov	r2, r6
     fe2:	4639      	mov	r1, r7
     fe4:	4628      	mov	r0, r5
     fe6:	f7ff ff6f 	bl	ec8 <_WriteNoCheck>
     fea:	4634      	mov	r4, r6
     fec:	e7f1      	b.n	fd2 <SEGGER_RTT_WriteNoLock+0x22>
    Avail = _GetAvailWriteSpace(pRing);
     fee:	4628      	mov	r0, r5
     ff0:	f7ff ff5c 	bl	eac <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
     ff4:	4286      	cmp	r6, r0
     ff6:	4634      	mov	r4, r6
     ff8:	bf28      	it	cs
     ffa:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
     ffc:	4622      	mov	r2, r4
     ffe:	4639      	mov	r1, r7
    1000:	4628      	mov	r0, r5
    1002:	f7ff ff61 	bl	ec8 <_WriteNoCheck>
    break;
    1006:	e7e4      	b.n	fd2 <SEGGER_RTT_WriteNoLock+0x22>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1008:	4628      	mov	r0, r5
}
    100a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    100e:	f7ff bf75 	b.w	efc <_WriteBlocking>
    1012:	bf00      	nop
    1014:	20000540 	.word	0x20000540

00001018 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1018:	f7ff bf9a 	b.w	f50 <_DoInit>

0000101c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    101c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    101e:	f7ff fffb 	bl	1018 <SEGGER_RTT_Init>
}
    1022:	bd08      	pop	{r3, pc}

00001024 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1024:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    1026:	4c04      	ldr	r4, [pc, #16]	; (1038 <rtt_console_init+0x14>)
    1028:	4620      	mov	r0, r4
    102a:	f7ff fc81 	bl	930 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    102e:	4620      	mov	r0, r4
    1030:	f000 fdc0 	bl	1bb4 <__stdout_hook_install>

	return 0;
}
    1034:	2000      	movs	r0, #0
    1036:	bd10      	pop	{r4, pc}
    1038:	0000103d 	.word	0x0000103d

0000103c <rtt_console_out>:
{
    103c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1040:	4f16      	ldr	r7, [pc, #88]	; (109c <rtt_console_out+0x60>)
    1042:	4d17      	ldr	r5, [pc, #92]	; (10a0 <rtt_console_out+0x64>)
	char c = (char)character;
    1044:	f88d 0007 	strb.w	r0, [sp, #7]
{
    1048:	4606      	mov	r6, r0
	char c = (char)character;
    104a:	2403      	movs	r4, #3
    104c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1050:	4638      	mov	r0, r7
    1052:	f001 f919 	bl	2288 <_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1056:	2201      	movs	r2, #1
    1058:	f10d 0107 	add.w	r1, sp, #7
    105c:	2000      	movs	r0, #0
    105e:	f7ff ffa7 	bl	fb0 <SEGGER_RTT_WriteNoLock>
    1062:	4680      	mov	r8, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1064:	4638      	mov	r0, r7
    1066:	f001 f971 	bl	234c <_impl_k_mutex_unlock>
		if (cnt) {
    106a:	f1b8 0f00 	cmp.w	r8, #0
    106e:	d005      	beq.n	107c <rtt_console_out+0x40>
			host_present = true;
    1070:	2301      	movs	r3, #1
    1072:	702b      	strb	r3, [r5, #0]
}
    1074:	4630      	mov	r0, r6
    1076:	b002      	add	sp, #8
    1078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    107c:	782b      	ldrb	r3, [r5, #0]
    107e:	2b00      	cmp	r3, #0
    1080:	d0f8      	beq.n	1074 <rtt_console_out+0x38>
			if (max_cnt) {
    1082:	3c01      	subs	r4, #1
    1084:	d007      	beq.n	1096 <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    1086:	f001 fc0f 	bl	28a8 <k_is_in_isr>
    108a:	2800      	cmp	r0, #0
    108c:	d1de      	bne.n	104c <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    108e:	2002      	movs	r0, #2
    1090:	f001 fb98 	bl	27c4 <_impl_k_sleep>
		SEGGER_RTT_LOCK();
    1094:	e7da      	b.n	104c <rtt_console_out+0x10>
				host_present = false;
    1096:	702c      	strb	r4, [r5, #0]
    1098:	e7ec      	b.n	1074 <rtt_console_out+0x38>
    109a:	bf00      	nop
    109c:	200013ec 	.word	0x200013ec
    10a0:	20000410 	.word	0x20000410

000010a4 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    10a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    10a6:	f04f 0320 	mov.w	r3, #32
    10aa:	f3ef 8211 	mrs	r2, BASEPRI
    10ae:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10b2:	4c11      	ldr	r4, [pc, #68]	; (10f8 <_m16src_stop+0x54>)
    10b4:	7823      	ldrb	r3, [r4, #0]
    10b6:	b923      	cbnz	r3, 10c2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10b8:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10bc:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    10c0:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    10c2:	3b01      	subs	r3, #1
    10c4:	b2db      	uxtb	r3, r3
    10c6:	7023      	strb	r3, [r4, #0]
    10c8:	b123      	cbz	r3, 10d4 <_m16src_stop+0x30>
    10ca:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    10ce:	f06f 000f 	mvn.w	r0, #15
    10d2:	e7f5      	b.n	10c0 <_m16src_stop+0x1c>
	if (m16src_grd) {
    10d4:	4b09      	ldr	r3, [pc, #36]	; (10fc <_m16src_stop+0x58>)
    10d6:	7818      	ldrb	r0, [r3, #0]
    10d8:	2101      	movs	r1, #1
    10da:	b128      	cbz	r0, 10e8 <_m16src_stop+0x44>
		m16src_ref++;
    10dc:	7021      	strb	r1, [r4, #0]
    10de:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    10e2:	f06f 000a 	mvn.w	r0, #10
    10e6:	e7eb      	b.n	10c0 <_m16src_stop+0x1c>
	m16src_grd = 1;
    10e8:	7019      	strb	r1, [r3, #0]
    10ea:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    10ee:	4a04      	ldr	r2, [pc, #16]	; (1100 <_m16src_stop+0x5c>)
    10f0:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    10f2:	7018      	strb	r0, [r3, #0]
	return 0;
    10f4:	e7e4      	b.n	10c0 <_m16src_stop+0x1c>
    10f6:	bf00      	nop
    10f8:	20000413 	.word	0x20000413
    10fc:	20000412 	.word	0x20000412
    1100:	40000004 	.word	0x40000004

00001104 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1104:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1106:	2200      	movs	r2, #0
    1108:	4610      	mov	r0, r2
    110a:	2101      	movs	r1, #1
    110c:	f000 fb82 	bl	1814 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1110:	2000      	movs	r0, #0
    1112:	f000 fb5b 	bl	17cc <_arch_irq_enable>

	return 0;
}
    1116:	2000      	movs	r0, #0
    1118:	bd08      	pop	{r3, pc}
	...

0000111c <_m16src_start>:
{
    111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    111e:	f04f 0220 	mov.w	r2, #32
    1122:	f3ef 8311 	mrs	r3, BASEPRI
    1126:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    112a:	4a26      	ldr	r2, [pc, #152]	; (11c4 <_m16src_start+0xa8>)
    112c:	7810      	ldrb	r0, [r2, #0]
    112e:	1c44      	adds	r4, r0, #1
    1130:	7014      	strb	r4, [r2, #0]
    1132:	b170      	cbz	r0, 1152 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1134:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    1138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    113c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1140:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    1144:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    1148:	bf0c      	ite	eq
    114a:	2000      	moveq	r0, #0
    114c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1150:	e007      	b.n	1162 <_m16src_start+0x46>
	if (m16src_grd) {
    1152:	4d1d      	ldr	r5, [pc, #116]	; (11c8 <_m16src_start+0xac>)
    1154:	782f      	ldrb	r7, [r5, #0]
    1156:	b12f      	cbz	r7, 1164 <_m16src_start+0x48>
		m16src_ref--;
    1158:	7010      	strb	r0, [r2, #0]
    115a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    115e:	f06f 000a 	mvn.w	r0, #10
}
    1162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1164:	2601      	movs	r6, #1
    1166:	702e      	strb	r6, [r5, #0]
    1168:	f383 8811 	msr	BASEPRI, r3
	if (blocking) {
    116c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1170:	b319      	cbz	r1, 11ba <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    1172:	4638      	mov	r0, r7
    1174:	f000 fb3a 	bl	17ec <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1178:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    117c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    1180:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1184:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1186:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    118a:	b192      	cbz	r2, 11b2 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    118c:	2200      	movs	r2, #0
    118e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1192:	4a0e      	ldr	r2, [pc, #56]	; (11cc <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1194:	f013 0f01 	tst.w	r3, #1
    1198:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    119c:	bf08      	it	eq
    119e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    11a2:	2000      	movs	r0, #0
    11a4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    11a8:	f000 fb10 	bl	17cc <_arch_irq_enable>
	m16src_grd = 0;
    11ac:	2300      	movs	r3, #0
    11ae:	702b      	strb	r3, [r5, #0]
    11b0:	e7c2      	b.n	1138 <_m16src_start+0x1c>
			__WFE();
    11b2:	bf20      	wfe
			__SEV();
    11b4:	bf40      	sev
			__WFE();
    11b6:	bf20      	wfe
    11b8:	e7e5      	b.n	1186 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    11be:	6026      	str	r6, [r4, #0]
    11c0:	e7f4      	b.n	11ac <_m16src_start+0x90>
    11c2:	bf00      	nop
    11c4:	20000413 	.word	0x20000413
    11c8:	20000412 	.word	0x20000412
    11cc:	e000e100 	.word	0xe000e100

000011d0 <_k32src_start>:
{
    11d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    11d2:	f04f 0220 	mov.w	r2, #32
    11d6:	f3ef 8311 	mrs	r3, BASEPRI
    11da:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11de:	4d1d      	ldr	r5, [pc, #116]	; (1254 <_k32src_start+0x84>)
    11e0:	782a      	ldrb	r2, [r5, #0]
    11e2:	b18a      	cbz	r2, 1208 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11e4:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    11e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    11ec:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    11f0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    11f4:	f003 0303 	and.w	r3, r3, #3
    11f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    11fc:	4393      	bics	r3, r2
}
    11fe:	bf14      	ite	ne
    1200:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1204:	2000      	moveq	r0, #0
    1206:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    1208:	2401      	movs	r4, #1
    120a:	702c      	strb	r4, [r5, #0]
    120c:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1214:	4d10      	ldr	r5, [pc, #64]	; (1258 <_k32src_start+0x88>)
    1216:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    121a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    121e:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1220:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    1224:	f04f 0518 	mov.w	r5, #24
    1228:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    122c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1230:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1234:	d1d8      	bne.n	11e8 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1236:	2210      	movs	r2, #16
    1238:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    123c:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    1240:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1244:	f7ff ff6a 	bl	111c <_m16src_start>
		if (!err) {
    1248:	2800      	cmp	r0, #0
    124a:	d1cd      	bne.n	11e8 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <_k32src_start+0x8c>)
    124e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1252:	e7c9      	b.n	11e8 <_k32src_start+0x18>
    1254:	20000411 	.word	0x20000411
    1258:	40000008 	.word	0x40000008
    125c:	e000e100 	.word	0xe000e100

00001260 <_power_clock_isr>:
{
    1260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1266:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1268:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    126c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1270:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1274:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1278:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    127c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1280:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1288:	f1bc 0f00 	cmp.w	ip, #0
    128c:	d003      	beq.n	1296 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    128e:	f04f 0c00 	mov.w	ip, #0
    1292:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    1296:	b127      	cbz	r7, 12a2 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    129c:	2700      	movs	r7, #0
    129e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12a2:	b152      	cbz	r2, 12ba <_power_clock_isr+0x5a>
    12a4:	03e3      	lsls	r3, r4, #15
    12a6:	d508      	bpl.n	12ba <_power_clock_isr+0x5a>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    12ac:	4c15      	ldr	r4, [pc, #84]	; (1304 <_power_clock_isr+0xa4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ae:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    12b0:	2702      	movs	r7, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    12b6:	6027      	str	r7, [r4, #0]
		NRF_CLOCK->TASKS_CAL = 1;
    12b8:	611a      	str	r2, [r3, #16]
	if (lf) {
    12ba:	b120      	cbz	r0, 12c6 <_power_clock_isr+0x66>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12c0:	2200      	movs	r2, #0
    12c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12c6:	b159      	cbz	r1, 12e0 <_power_clock_isr+0x80>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    12c8:	4b0e      	ldr	r3, [pc, #56]	; (1304 <_power_clock_isr+0xa4>)
		NRF_CLOCK->EVENTS_DONE = 0;
    12ca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    12ce:	2100      	movs	r1, #0
    12d0:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    12d2:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    12d4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12d8:	f7ff fee4 	bl	10a4 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12dc:	2301      	movs	r3, #1
    12de:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12e0:	b176      	cbz	r6, 1300 <_power_clock_isr+0xa0>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12e6:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12e8:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ea:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12ee:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12f4:	f7ff ff12 	bl	111c <_m16src_start>
		if (!err) {
    12f8:	b910      	cbnz	r0, 1300 <_power_clock_isr+0xa0>
    12fa:	4b03      	ldr	r3, [pc, #12]	; (1308 <_power_clock_isr+0xa8>)
    12fc:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    1300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1302:	bf00      	nop
    1304:	40000c34 	.word	0x40000c34
    1308:	e000e100 	.word	0xe000e100

0000130c <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    130c:	4b09      	ldr	r3, [pc, #36]	; (1334 <rtc_compare_set+0x28>)
    130e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    1312:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1316:	1ac0      	subs	r0, r0, r3
    1318:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    131c:	f023 0301 	bic.w	r3, r3, #1
    1320:	b10b      	cbz	r3, 1326 <rtc_compare_set+0x1a>
    1322:	0203      	lsls	r3, r0, #8
    1324:	d504      	bpl.n	1330 <rtc_compare_set+0x24>
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <rtc_compare_set+0x2c>)
    1328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    132c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1330:	4770      	bx	lr
    1332:	bf00      	nop
    1334:	40011000 	.word	0x40011000
    1338:	e000e100 	.word	0xe000e100

0000133c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    133c:	b510      	push	{r4, lr}
    133e:	4b13      	ldr	r3, [pc, #76]	; (138c <rtc_announce_set_next+0x50>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1340:	4c13      	ldr	r4, [pc, #76]	; (1390 <rtc_announce_set_next+0x54>)
    1342:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1346:	6822      	ldr	r2, [r4, #0]
    1348:	1a80      	subs	r0, r0, r2
    134a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick()) {
    134e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1352:	d913      	bls.n	137c <rtc_announce_set_next+0x40>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();

		if (sys_elapsed > expected_sys_ticks) {
    1354:	490f      	ldr	r1, [pc, #60]	; (1394 <rtc_announce_set_next+0x58>)
    1356:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();
    1358:	f240 1347 	movw	r3, #327	; 0x147
    135c:	fbb0 f0f3 	udiv	r0, r0, r3
		if (sys_elapsed > expected_sys_ticks) {
    1360:	4288      	cmp	r0, r1
    1362:	bf28      	it	cs
    1364:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1366:	fb03 2300 	mla	r3, r3, r0, r2
#endif
}

static void wrapped_announce(s32_t ticks)
{
	driver_uptime += ticks;
    136a:	4a0b      	ldr	r2, [pc, #44]	; (1398 <rtc_announce_set_next+0x5c>)
				(sys_elapsed * sys_clock_hw_cycles_per_tick())
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]
    1372:	6813      	ldr	r3, [r2, #0]
    1374:	4403      	add	r3, r0
    1376:	6013      	str	r3, [r2, #0]
	z_clock_announce(ticks);
    1378:	f001 fc06 	bl	2b88 <z_clock_announce>
		_sys_idle_elapsed_ticks = sys_elapsed;
		z_clock_announce(_sys_idle_elapsed_ticks);
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    137c:	6820      	ldr	r0, [r4, #0]
}
    137e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    1382:	f200 1047 	addw	r0, r0, #327	; 0x147
    1386:	f7ff bfc1 	b.w	130c <rtc_compare_set>
    138a:	bf00      	nop
    138c:	40011000 	.word	0x40011000
    1390:	2000041c 	.word	0x2000041c
    1394:	20000418 	.word	0x20000418
    1398:	20000414 	.word	0x20000414

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* z_clock_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    13a4:	f7ff bfca 	b.w	133c <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <z_clock_set_timeout>:
}
    13ac:	4770      	bx	lr

000013ae <z_clock_elapsed>:
}
    13ae:	2000      	movs	r0, #0
    13b0:	4770      	bx	lr
	...

000013b4 <z_clock_idle_exit>:
{
    13b4:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13b6:	4b07      	ldr	r3, [pc, #28]	; (13d4 <z_clock_idle_exit+0x20>)
    13b8:	2200      	movs	r2, #0
    13ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13be:	4b06      	ldr	r3, [pc, #24]	; (13d8 <z_clock_idle_exit+0x24>)
    13c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13c8:	f7ff ffb8 	bl	133c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    13cc:	4b03      	ldr	r3, [pc, #12]	; (13dc <z_clock_idle_exit+0x28>)
    13ce:	2201      	movs	r2, #1
    13d0:	601a      	str	r2, [r3, #0]
}
    13d2:	bd08      	pop	{r3, pc}
    13d4:	40011000 	.word	0x40011000
    13d8:	e000e100 	.word	0xe000e100
    13dc:	20000418 	.word	0x20000418

000013e0 <z_clock_driver_init>:
	sys_trace_isr_exit();

}

int z_clock_driver_init(struct device *device)
{
    13e0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    13e2:	4819      	ldr	r0, [pc, #100]	; (1448 <z_clock_driver_init+0x68>)
    13e4:	f000 fe5e 	bl	20a4 <device_get_binding>
	if (!clock) {
    13e8:	b350      	cbz	r0, 1440 <z_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    13ea:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    13ec:	4d17      	ldr	r5, [pc, #92]	; (144c <z_clock_driver_init+0x6c>)
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	2101      	movs	r1, #1
    13f2:	4798      	blx	r3
	rtc_past = 0;
    13f4:	4b16      	ldr	r3, [pc, #88]	; (1450 <z_clock_driver_init+0x70>)
    13f6:	2400      	movs	r4, #0
    13f8:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    13fa:	4b16      	ldr	r3, [pc, #88]	; (1454 <z_clock_driver_init+0x74>)
    13fc:	2601      	movs	r6, #1
    13fe:	601e      	str	r6, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    1400:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1404:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    1408:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1410:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    1414:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1418:	4b0f      	ldr	r3, [pc, #60]	; (1458 <z_clock_driver_init+0x78>)
		       sys_clock_hw_cycles_per_tick());
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    141a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    141e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1422:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1426:	4631      	mov	r1, r6
    1428:	4622      	mov	r2, r4
    142a:	2011      	movs	r0, #17
    142c:	f000 f9f2 	bl	1814 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1430:	2011      	movs	r0, #17
    1432:	f000 f9cb 	bl	17cc <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    1436:	4b09      	ldr	r3, [pc, #36]	; (145c <z_clock_driver_init+0x7c>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    1438:	4620      	mov	r0, r4
    143a:	601e      	str	r6, [r3, #0]
    143c:	602e      	str	r6, [r5, #0]
}
    143e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1444:	e7fb      	b.n	143e <z_clock_driver_init+0x5e>
    1446:	bf00      	nop
    1448:	00002da0 	.word	0x00002da0
    144c:	40011000 	.word	0x40011000
    1450:	2000041c 	.word	0x2000041c
    1454:	20000418 	.word	0x20000418
    1458:	e000e100 	.word	0xe000e100
    145c:	40011008 	.word	0x40011008

00001460 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1460:	b508      	push	{r3, lr}
	u32_t ticked_cycles;
	u32_t elapsed_cycles;

	/* Number of timer cycles announced as ticks so far. */
	ticked_cycles = z_tick_get() * sys_clock_hw_cycles_per_tick();
    1462:	f001 fbdd 	bl	2c20 <z_tick_get>
    1466:	f240 1347 	movw	r3, #327	; 0x147
    146a:	4358      	muls	r0, r3
     return p_rtc->COUNTER;
    146c:	4b03      	ldr	r3, [pc, #12]	; (147c <_timer_cycle_get_32+0x1c>)
    146e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * The value of RTC_COUNTER is not reset on tick, so it will
	 * compensate potentialy missed update of z_tick_get()
	 * which could have happen between the ticked_cycles calculation
	 * and the code below.
	 */
	elapsed_cycles = (RTC_COUNTER - ticked_cycles) & RTC_MASK;
    1472:	1a1b      	subs	r3, r3, r0
    1474:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return ticked_cycles + elapsed_cycles;
}
    1478:	4418      	add	r0, r3
    147a:	bd08      	pop	{r3, pc}
    147c:	40011000 	.word	0x40011000

00001480 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1480:	4804      	ldr	r0, [pc, #16]	; (1494 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1482:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1484:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    1486:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1488:	d003      	beq.n	1492 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    148a:	4903      	ldr	r1, [pc, #12]	; (1498 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1490:	600a      	str	r2, [r1, #0]

00001492 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    1492:	4770      	bx	lr
    ldr r0, =_kernel
    1494:	200005e8 	.word	0x200005e8
    ldr r1, =_SCS_ICSR
    1498:	e000ed04 	.word	0xe000ed04

0000149c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    149c:	4804      	ldr	r0, [pc, #16]	; (14b0 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    149e:	2300      	movs	r3, #0
    14a0:	2120      	movs	r1, #32
    14a2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14a4:	3301      	adds	r3, #1
    14a6:	2b27      	cmp	r3, #39	; 0x27
    14a8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14ac:	d1f9      	bne.n	14a2 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14ae:	4770      	bx	lr
    14b0:	e000e100 	.word	0xe000e100

000014b4 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    14b4:	4a08      	ldr	r2, [pc, #32]	; (14d8 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    14b6:	4909      	ldr	r1, [pc, #36]	; (14dc <__swap+0x28>)
	_current->arch.basepri = key;
    14b8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    14ba:	6809      	ldr	r1, [r1, #0]
    14bc:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14be:	4908      	ldr	r1, [pc, #32]	; (14e0 <__swap+0x2c>)
	_current->arch.basepri = key;
    14c0:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14c2:	684b      	ldr	r3, [r1, #4]
    14c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14c8:	604b      	str	r3, [r1, #4]
    14ca:	2300      	movs	r3, #0
    14cc:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    14d0:	6893      	ldr	r3, [r2, #8]
}
    14d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop
    14d8:	200005e8 	.word	0x200005e8
    14dc:	00003210 	.word	0x00003210
    14e0:	e000ed00 	.word	0xe000ed00

000014e4 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14e4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14e6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14ea:	490d      	ldr	r1, [pc, #52]	; (1520 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14ec:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14ee:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    14f2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    14f4:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14f8:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    14fc:	4f09      	ldr	r7, [pc, #36]	; (1524 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1502:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1504:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1506:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1508:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    150a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    150c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    150e:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1512:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1516:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    151a:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    151e:	4770      	bx	lr
    ldr r1, =_kernel
    1520:	200005e8 	.word	0x200005e8
    ldr v4, =_SCS_ICSR
    1524:	e000ed04 	.word	0xe000ed04

00001528 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1528:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    152c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    152e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1532:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1536:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1538:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    153c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1540:	2902      	cmp	r1, #2
    beq _oops
    1542:	d0ff      	beq.n	1544 <_oops>

00001544 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1544:	b500      	push	{lr}
    blx _do_kernel_oops
    1546:	f000 f9f9 	bl	193c <_do_kernel_oops>
    pop {pc}
    154a:	bd00      	pop	{pc}

0000154c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    154c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    154e:	4c19      	ldr	r4, [pc, #100]	; (15b4 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    1550:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    1552:	4819      	ldr	r0, [pc, #100]	; (15b8 <_MpuFault.isra.2+0x6c>)
    1554:	f7ff fb20 	bl	b98 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1558:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    155a:	06d1      	lsls	r1, r2, #27
    155c:	d502      	bpl.n	1564 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    155e:	4817      	ldr	r0, [pc, #92]	; (15bc <_MpuFault.isra.2+0x70>)
    1560:	f7ff fb1a 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    1564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1566:	071a      	lsls	r2, r3, #28
    1568:	d502      	bpl.n	1570 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    156a:	4815      	ldr	r0, [pc, #84]	; (15c0 <_MpuFault.isra.2+0x74>)
    156c:	f7ff fb14 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1570:	4c10      	ldr	r4, [pc, #64]	; (15b4 <_MpuFault.isra.2+0x68>)
    1572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1574:	079b      	lsls	r3, r3, #30
    1576:	d50e      	bpl.n	1596 <_MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
    1578:	4812      	ldr	r0, [pc, #72]	; (15c4 <_MpuFault.isra.2+0x78>)
    157a:	f7ff fb0d 	bl	b98 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    157e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1582:	0618      	lsls	r0, r3, #24
    1584:	d507      	bpl.n	1596 <_MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    1586:	4810      	ldr	r0, [pc, #64]	; (15c8 <_MpuFault.isra.2+0x7c>)
    1588:	f7ff fb06 	bl	b98 <printk>
			if (fromHardFault) {
    158c:	b11d      	cbz	r5, 1596 <_MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    158e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1594:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1596:	4c07      	ldr	r4, [pc, #28]	; (15b4 <_MpuFault.isra.2+0x68>)
    1598:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    159a:	07d2      	lsls	r2, r2, #31
    159c:	d502      	bpl.n	15a4 <_MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    159e:	480b      	ldr	r0, [pc, #44]	; (15cc <_MpuFault.isra.2+0x80>)
    15a0:	f7ff fafa 	bl	b98 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    15a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15a6:	069b      	lsls	r3, r3, #26
    15a8:	d502      	bpl.n	15b0 <_MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
    15aa:	4809      	ldr	r0, [pc, #36]	; (15d0 <_MpuFault.isra.2+0x84>)
    15ac:	f7ff faf4 	bl	b98 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    15b0:	2000      	movs	r0, #0
    15b2:	bd38      	pop	{r3, r4, r5, pc}
    15b4:	e000ed00 	.word	0xe000ed00
    15b8:	00002f0f 	.word	0x00002f0f
    15bc:	00002f26 	.word	0x00002f26
    15c0:	00002f38 	.word	0x00002f38
    15c4:	00002f4c 	.word	0x00002f4c
    15c8:	00002f65 	.word	0x00002f65
    15cc:	00002f7c 	.word	0x00002f7c
    15d0:	00002f9c 	.word	0x00002f9c

000015d4 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    15d4:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15d6:	4c1b      	ldr	r4, [pc, #108]	; (1644 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    15d8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    15da:	481b      	ldr	r0, [pc, #108]	; (1648 <_BusFault.isra.3+0x74>)
    15dc:	f7ff fadc 	bl	b98 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e2:	04d8      	lsls	r0, r3, #19
    15e4:	d504      	bpl.n	15f0 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    15e6:	4819      	ldr	r0, [pc, #100]	; (164c <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    15e8:	f7ff fad6 	bl	b98 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    15ec:	2000      	movs	r0, #0
    15ee:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f2:	0519      	lsls	r1, r3, #20
    15f4:	d501      	bpl.n	15fa <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    15f6:	4816      	ldr	r0, [pc, #88]	; (1650 <_BusFault.isra.3+0x7c>)
    15f8:	e7f6      	b.n	15e8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fc:	059a      	lsls	r2, r3, #22
    15fe:	d514      	bpl.n	162a <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    1600:	4814      	ldr	r0, [pc, #80]	; (1654 <_BusFault.isra.3+0x80>)
    1602:	f7ff fac9 	bl	b98 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160a:	041b      	lsls	r3, r3, #16
    160c:	d507      	bpl.n	161e <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    160e:	4812      	ldr	r0, [pc, #72]	; (1658 <_BusFault.isra.3+0x84>)
    1610:	f7ff fac2 	bl	b98 <printk>
			if (fromHardFault) {
    1614:	b11d      	cbz	r5, 161e <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1616:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    161c:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    161e:	4b09      	ldr	r3, [pc, #36]	; (1644 <_BusFault.isra.3+0x70>)
    1620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1622:	0558      	lsls	r0, r3, #21
    1624:	d5e2      	bpl.n	15ec <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    1626:	480d      	ldr	r0, [pc, #52]	; (165c <_BusFault.isra.3+0x88>)
    1628:	e7de      	b.n	15e8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    162a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    162c:	0559      	lsls	r1, r3, #21
    162e:	d4fa      	bmi.n	1626 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1632:	05da      	lsls	r2, r3, #23
    1634:	d501      	bpl.n	163a <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    1636:	480a      	ldr	r0, [pc, #40]	; (1660 <_BusFault.isra.3+0x8c>)
    1638:	e7d6      	b.n	15e8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    163a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    163c:	049b      	lsls	r3, r3, #18
    163e:	d5d5      	bpl.n	15ec <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1640:	4808      	ldr	r0, [pc, #32]	; (1664 <_BusFault.isra.3+0x90>)
    1642:	e7d1      	b.n	15e8 <_BusFault.isra.3+0x14>
    1644:	e000ed00 	.word	0xe000ed00
    1648:	00002dc0 	.word	0x00002dc0
    164c:	00002f26 	.word	0x00002f26
    1650:	00002f38 	.word	0x00002f38
    1654:	00002dd7 	.word	0x00002dd7
    1658:	00002df1 	.word	0x00002df1
    165c:	00002e07 	.word	0x00002e07
    1660:	00002e23 	.word	0x00002e23
    1664:	00002f9c 	.word	0x00002f9c

00001668 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    1668:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    166a:	4c19      	ldr	r4, [pc, #100]	; (16d0 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    166c:	4819      	ldr	r0, [pc, #100]	; (16d4 <_UsageFault.isra.5+0x6c>)
    166e:	f7ff fa93 	bl	b98 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1672:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1674:	0193      	lsls	r3, r2, #6
    1676:	d502      	bpl.n	167e <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    1678:	4817      	ldr	r0, [pc, #92]	; (16d8 <_UsageFault.isra.5+0x70>)
    167a:	f7ff fa8d 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    167e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1680:	01dc      	lsls	r4, r3, #7
    1682:	d502      	bpl.n	168a <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    1684:	4815      	ldr	r0, [pc, #84]	; (16dc <_UsageFault.isra.5+0x74>)
    1686:	f7ff fa87 	bl	b98 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    168a:	4c11      	ldr	r4, [pc, #68]	; (16d0 <_UsageFault.isra.5+0x68>)
    168c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    168e:	0310      	lsls	r0, r2, #12
    1690:	d502      	bpl.n	1698 <_UsageFault.isra.5+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    1692:	4813      	ldr	r0, [pc, #76]	; (16e0 <_UsageFault.isra.5+0x78>)
    1694:	f7ff fa80 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1698:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    169a:	0359      	lsls	r1, r3, #13
    169c:	d502      	bpl.n	16a4 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    169e:	4811      	ldr	r0, [pc, #68]	; (16e4 <_UsageFault.isra.5+0x7c>)
    16a0:	f7ff fa7a 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    16a4:	4c0a      	ldr	r4, [pc, #40]	; (16d0 <_UsageFault.isra.5+0x68>)
    16a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    16a8:	0392      	lsls	r2, r2, #14
    16aa:	d502      	bpl.n	16b2 <_UsageFault.isra.5+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    16ac:	480e      	ldr	r0, [pc, #56]	; (16e8 <_UsageFault.isra.5+0x80>)
    16ae:	f7ff fa73 	bl	b98 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16b4:	03db      	lsls	r3, r3, #15
    16b6:	d502      	bpl.n	16be <_UsageFault.isra.5+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    16b8:	480c      	ldr	r0, [pc, #48]	; (16ec <_UsageFault.isra.5+0x84>)
    16ba:	f7ff fa6d 	bl	b98 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16be:	4a04      	ldr	r2, [pc, #16]	; (16d0 <_UsageFault.isra.5+0x68>)
    16c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16c2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16c6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16ca:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16cc:	2000      	movs	r0, #0
    16ce:	bd10      	pop	{r4, pc}
    16d0:	e000ed00 	.word	0xe000ed00
    16d4:	00002fcc 	.word	0x00002fcc
    16d8:	00002fe5 	.word	0x00002fe5
    16dc:	00002ff9 	.word	0x00002ff9
    16e0:	00003014 	.word	0x00003014
    16e4:	00003033 	.word	0x00003033
    16e8:	00003059 	.word	0x00003059
    16ec:	00003074 	.word	0x00003074

000016f0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    16f0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16f2:	4c27      	ldr	r4, [pc, #156]	; (1790 <_Fault+0xa0>)
    16f4:	6863      	ldr	r3, [r4, #4]
    16f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
	switch (fault) {
    16fa:	1ed1      	subs	r1, r2, #3
{
    16fc:	4605      	mov	r5, r0
	switch (fault) {
    16fe:	2909      	cmp	r1, #9
    1700:	d83a      	bhi.n	1778 <_Fault+0x88>
    1702:	e8df f001 	tbb	[pc, r1]
    1706:	3305      	.short	0x3305
    1708:	39393035 	.word	0x39393035
    170c:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    1710:	4820      	ldr	r0, [pc, #128]	; (1794 <_Fault+0xa4>)
    1712:	f7ff fa41 	bl	b98 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1716:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1718:	079a      	lsls	r2, r3, #30
    171a:	d503      	bpl.n	1724 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    171c:	481e      	ldr	r0, [pc, #120]	; (1798 <_Fault+0xa8>)
	PR_FAULT_INFO(
    171e:	f7ff fa3b 	bl	b98 <printk>
    1722:	e002      	b.n	172a <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1726:	005b      	lsls	r3, r3, #1
    1728:	d405      	bmi.n	1736 <_Fault+0x46>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    172a:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    172c:	4629      	mov	r1, r5
}
    172e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
    1732:	f000 b8d1 	b.w	18d8 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    1736:	4819      	ldr	r0, [pc, #100]	; (179c <_Fault+0xac>)
    1738:	f7ff fa2e 	bl	b98 <printk>
		if (SCB_MMFSR) {
    173c:	4b18      	ldr	r3, [pc, #96]	; (17a0 <_Fault+0xb0>)
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	b12b      	cbz	r3, 174e <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    1742:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    1744:	f7ff ff02 	bl	154c <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    1748:	2806      	cmp	r0, #6
    174a:	d1ef      	bne.n	172c <_Fault+0x3c>
}
    174c:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR) {
    174e:	4b15      	ldr	r3, [pc, #84]	; (17a4 <_Fault+0xb4>)
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	b11b      	cbz	r3, 175c <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    1754:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    1756:	f7ff ff3d 	bl	15d4 <_BusFault.isra.3>
		break;
    175a:	e7f5      	b.n	1748 <_Fault+0x58>
		} else if (SCB_UFSR) {
    175c:	4b12      	ldr	r3, [pc, #72]	; (17a8 <_Fault+0xb8>)
    175e:	881b      	ldrh	r3, [r3, #0]
    1760:	b29b      	uxth	r3, r3
    1762:	2b00      	cmp	r3, #0
    1764:	d0e1      	beq.n	172a <_Fault+0x3a>
		reason = _UsageFault(esf);
    1766:	f7ff ff7f 	bl	1668 <_UsageFault.isra.5>
		break;
    176a:	e7ed      	b.n	1748 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    176c:	2000      	movs	r0, #0
    176e:	e7e9      	b.n	1744 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    1770:	2000      	movs	r0, #0
    1772:	e7f0      	b.n	1756 <_Fault+0x66>
	PR_FAULT_INFO(
    1774:	480d      	ldr	r0, [pc, #52]	; (17ac <_Fault+0xbc>)
    1776:	e7d2      	b.n	171e <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1778:	f413 7ff8 	tst.w	r3, #496	; 0x1f0
    177c:	4b0c      	ldr	r3, [pc, #48]	; (17b0 <_Fault+0xc0>)
    177e:	490d      	ldr	r1, [pc, #52]	; (17b4 <_Fault+0xc4>)
    1780:	480d      	ldr	r0, [pc, #52]	; (17b8 <_Fault+0xc8>)
    1782:	f1a2 0210 	sub.w	r2, r2, #16
    1786:	bf18      	it	ne
    1788:	4619      	movne	r1, r3
    178a:	f7ff fa05 	bl	b98 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    178e:	e7cc      	b.n	172a <_Fault+0x3a>
    1790:	e000ed00 	.word	0xe000ed00
    1794:	00002e6a 	.word	0x00002e6a
    1798:	00002e82 	.word	0x00002e82
    179c:	00002ea4 	.word	0x00002ea4
    17a0:	e000ed28 	.word	0xe000ed28
    17a4:	e000ed29 	.word	0xe000ed29
    17a8:	e000ed2a 	.word	0xe000ed2a
    17ac:	00002ec4 	.word	0x00002ec4
    17b0:	00002e51 	.word	0x00002e51
    17b4:	00002e3c 	.word	0x00002e3c
    17b8:	00002efb 	.word	0x00002efb

000017bc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    17bc:	4a02      	ldr	r2, [pc, #8]	; (17c8 <_FaultInit+0xc>)
    17be:	6953      	ldr	r3, [r2, #20]
    17c0:	f043 0310 	orr.w	r3, r3, #16
    17c4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    17c6:	4770      	bx	lr
    17c8:	e000ed00 	.word	0xe000ed00

000017cc <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    17cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    17ce:	2b00      	cmp	r3, #0
    17d0:	db08      	blt.n	17e4 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17d2:	2201      	movs	r2, #1
    17d4:	f000 001f 	and.w	r0, r0, #31
    17d8:	fa02 f000 	lsl.w	r0, r2, r0
    17dc:	095b      	lsrs	r3, r3, #5
    17de:	4a02      	ldr	r2, [pc, #8]	; (17e8 <_arch_irq_enable+0x1c>)
    17e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    17e4:	4770      	bx	lr
    17e6:	bf00      	nop
    17e8:	e000e100 	.word	0xe000e100

000017ec <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    17ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    17ee:	2b00      	cmp	r3, #0
    17f0:	db0d      	blt.n	180e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17f2:	2201      	movs	r2, #1
    17f4:	095b      	lsrs	r3, r3, #5
    17f6:	f000 001f 	and.w	r0, r0, #31
    17fa:	fa02 f000 	lsl.w	r0, r2, r0
    17fe:	3320      	adds	r3, #32
    1800:	4a03      	ldr	r2, [pc, #12]	; (1810 <_arch_irq_disable+0x24>)
    1802:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180a:	f3bf 8f6f 	isb	sy
}
    180e:	4770      	bx	lr
    1810:	e000e100 	.word	0xe000e100

00001814 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1814:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1816:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1818:	bfa8      	it	ge
    181a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    181e:	f101 0101 	add.w	r1, r1, #1
    1822:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1826:	bfae      	itee	ge
    1828:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    182c:	f000 000f 	andlt.w	r0, r0, #15
    1830:	4b03      	ldrlt	r3, [pc, #12]	; (1840 <_irq_priority_set+0x2c>)
    1832:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1834:	bfac      	ite	ge
    1836:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    183a:	5419      	strblt	r1, [r3, r0]
}
    183c:	4770      	bx	lr
    183e:	bf00      	nop
    1840:	e000ed14 	.word	0xe000ed14

00001844 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1844:	f000 b834 	b.w	18b0 <__bus_fault>

00001848 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    184a:	460c      	mov	r4, r1
    184c:	4616      	mov	r6, r2
    184e:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1850:	2204      	movs	r2, #4
    1852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1854:	9909      	ldr	r1, [sp, #36]	; 0x24
    1856:	4605      	mov	r5, r0
    1858:	f001 f8f0 	bl	2a3c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    185c:	f1a6 0120 	sub.w	r1, r6, #32
    1860:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1862:	4a0c      	ldr	r2, [pc, #48]	; (1894 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1864:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    1868:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    186a:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    186e:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1872:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
    1876:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1878:	9a06      	ldr	r2, [sp, #24]
    187a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    187c:	9a07      	ldr	r2, [sp, #28]
    187e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1880:	9a08      	ldr	r2, [sp, #32]
    1882:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    1884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    1888:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    188a:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    188c:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    188e:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1892:	bf00      	nop
    1894:	00000869 	.word	0x00000869

00001898 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1898:	4901      	ldr	r1, [pc, #4]	; (18a0 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    189a:	2210      	movs	r2, #16
	str r2, [r1]
    189c:	600a      	str	r2, [r1, #0]
	bx lr
    189e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    18a0:	e000ed10 	.word	0xe000ed10

000018a4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    18a4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    18a6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    18aa:	bf30      	wfi

	bx lr
    18ac:	4770      	bx	lr
    18ae:	bf00      	nop

000018b0 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    18b0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    18b2:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    18b6:	f8df c01c 	ldr.w	ip, [pc, #28]	; 18d4 <__bus_fault+0x24>
	ldr ip, [ip]
    18ba:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    18be:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    18c2:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    18c4:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    18c8:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    18cc:	b500      	push	{lr}
	bl _Fault
    18ce:	f7ff ff0f 	bl	16f0 <_Fault>

	pop {pc}
    18d2:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    18d4:	e000ed04 	.word	0xe000ed04

000018d8 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    18d8:	b538      	push	{r3, r4, r5, lr}
    18da:	4604      	mov	r4, r0
    18dc:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    18de:	2805      	cmp	r0, #5
    18e0:	d81a      	bhi.n	1918 <_NanoFatalErrorHandler+0x40>
    18e2:	e8df f000 	tbb	[pc, r0]
    18e6:	1903      	.short	0x1903
    18e8:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    18ec:	480d      	ldr	r0, [pc, #52]	; (1924 <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    18ee:	f7ff f953 	bl	b98 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    18f2:	f000 ffa7 	bl	2844 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    18f6:	69aa      	ldr	r2, [r5, #24]
    18f8:	4601      	mov	r1, r0
    18fa:	480b      	ldr	r0, [pc, #44]	; (1928 <_NanoFatalErrorHandler+0x50>)
    18fc:	f7ff f94c 	bl	b98 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1900:	4629      	mov	r1, r5
    1902:	4620      	mov	r0, r4
}
    1904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1908:	f000 b81c 	b.w	1944 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    190c:	4807      	ldr	r0, [pc, #28]	; (192c <_NanoFatalErrorHandler+0x54>)
    190e:	e7ee      	b.n	18ee <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1910:	4807      	ldr	r0, [pc, #28]	; (1930 <_NanoFatalErrorHandler+0x58>)
    1912:	e7ec      	b.n	18ee <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1914:	4807      	ldr	r0, [pc, #28]	; (1934 <_NanoFatalErrorHandler+0x5c>)
    1916:	e7ea      	b.n	18ee <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1918:	4601      	mov	r1, r0
    191a:	4807      	ldr	r0, [pc, #28]	; (1938 <_NanoFatalErrorHandler+0x60>)
    191c:	f7ff f93c 	bl	b98 <printk>
		break;
    1920:	e7e7      	b.n	18f2 <_NanoFatalErrorHandler+0x1a>
    1922:	bf00      	nop
    1924:	000030a0 	.word	0x000030a0
    1928:	0000313e 	.word	0x0000313e
    192c:	000030c0 	.word	0x000030c0
    1930:	000030e6 	.word	0x000030e6
    1934:	00003100 	.word	0x00003100
    1938:	0000311b 	.word	0x0000311b

0000193c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    193c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    193e:	6800      	ldr	r0, [r0, #0]
    1940:	f7ff bfca 	b.w	18d8 <_NanoFatalErrorHandler>

00001944 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1944:	2805      	cmp	r0, #5
{
    1946:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1948:	d00c      	beq.n	1964 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    194a:	f000 ffad 	bl	28a8 <k_is_in_isr>
    194e:	b160      	cbz	r0, 196a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1950:	f000 ffaa 	bl	28a8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1954:	490c      	ldr	r1, [pc, #48]	; (1988 <_SysFatalErrorHandler+0x44>)
    1956:	4b0d      	ldr	r3, [pc, #52]	; (198c <_SysFatalErrorHandler+0x48>)
    1958:	2800      	cmp	r0, #0
    195a:	bf08      	it	eq
    195c:	4619      	moveq	r1, r3
    195e:	480c      	ldr	r0, [pc, #48]	; (1990 <_SysFatalErrorHandler+0x4c>)
    1960:	f7ff f91a 	bl	b98 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1964:	f7ff ff9e 	bl	18a4 <k_cpu_idle>
    1968:	e7fc      	b.n	1964 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    196a:	f000 ffad 	bl	28c8 <_is_thread_essential>
    196e:	2800      	cmp	r0, #0
    1970:	d1ee      	bne.n	1950 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1972:	4c08      	ldr	r4, [pc, #32]	; (1994 <_SysFatalErrorHandler+0x50>)
    1974:	4808      	ldr	r0, [pc, #32]	; (1998 <_SysFatalErrorHandler+0x54>)
    1976:	68a1      	ldr	r1, [r4, #8]
    1978:	f7ff f90e 	bl	b98 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    197c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1982:	f000 b80b 	b.w	199c <_impl_k_thread_abort>
    1986:	bf00      	nop
    1988:	0000317a 	.word	0x0000317a
    198c:	0000317e 	.word	0x0000317e
    1990:	0000318f 	.word	0x0000318f
    1994:	200005e8 	.word	0x200005e8
    1998:	000031af 	.word	0x000031af

0000199c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    199c:	b538      	push	{r3, r4, r5, lr}
    199e:	4605      	mov	r5, r0
	__asm__ volatile(
    19a0:	f04f 0320 	mov.w	r3, #32
    19a4:	f3ef 8411 	mrs	r4, BASEPRI
    19a8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    19ac:	f000 ffd8 	bl	2960 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    19b0:	4b0a      	ldr	r3, [pc, #40]	; (19dc <_impl_k_thread_abort+0x40>)
    19b2:	689b      	ldr	r3, [r3, #8]
    19b4:	42ab      	cmp	r3, r5
    19b6:	d10b      	bne.n	19d0 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    19b8:	4b09      	ldr	r3, [pc, #36]	; (19e0 <_impl_k_thread_abort+0x44>)
    19ba:	685a      	ldr	r2, [r3, #4]
    19bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    19c0:	b912      	cbnz	r2, 19c8 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    19c2:	4620      	mov	r0, r4
    19c4:	f7ff fd76 	bl	14b4 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19c8:	685a      	ldr	r2, [r3, #4]
    19ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    19ce:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    19d0:	4620      	mov	r0, r4
}
    19d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    19d6:	f000 bd83 	b.w	24e0 <_reschedule>
    19da:	bf00      	nop
    19dc:	200005e8 	.word	0x200005e8
    19e0:	e000ed00 	.word	0xe000ed00

000019e4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    19e4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    19e6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    19e8:	4a0b      	ldr	r2, [pc, #44]	; (1a18 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    19ea:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    19ec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    19ee:	bf1e      	ittt	ne
	movne	r1, #0
    19f0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    19f2:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    19f4:	f000 fb7c 	blne	20f0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    19f8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    19fa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    19fe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1a02:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1a06:	4905      	ldr	r1, [pc, #20]	; (1a1c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1a08:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1a0a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1a0c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1a0e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1a12:	f7ff bd35 	b.w	1480 <_ExcExit>
    1a16:	0000      	.short	0x0000
	ldr r2, =_kernel
    1a18:	200005e8 	.word	0x200005e8
	ldr r1, =_sw_isr_table
    1a1c:	000000dc 	.word	0x000000dc

00001a20 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a20:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a22:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1a26:	4806      	ldr	r0, [pc, #24]	; (1a40 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1a2c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a2e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1a32:	2002      	movs	r0, #2
    msr CONTROL, r0
    1a34:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1a38:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    1a3c:	f000 f806 	bl	1a4c <_PrepC>
    ldr r0, =_interrupt_stack
    1a40:	20000b58 	.word	0x20000b58

00001a44 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1a44:	bf30      	wfi
    b _SysNmiOnReset
    1a46:	f7ff bffd 	b.w	1a44 <_SysNmiOnReset>
    1a4a:	bf00      	nop

00001a4c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1a4c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <_PrepC+0x20>)
    1a50:	4a07      	ldr	r2, [pc, #28]	; (1a70 <_PrepC+0x24>)
    1a52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1a56:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a5c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1a60:	f000 fb60 	bl	2124 <_bss_zero>
	_data_copy();
    1a64:	f000 fb68 	bl	2138 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1a68:	f000 fb8a 	bl	2180 <_Cstart>
    1a6c:	00000000 	.word	0x00000000
    1a70:	e000ed00 	.word	0xe000ed00

00001a74 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1a74:	b508      	push	{r3, lr}
	handler();
    1a76:	f7ff ffe5 	bl	1a44 <_SysNmiOnReset>
	_ExcExit();
}
    1a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1a7e:	f7ff bcff 	b.w	1480 <_ExcExit>
	...

00001a84 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a84:	4b03      	ldr	r3, [pc, #12]	; (1a94 <arm_core_mpu_enable+0x10>)
    1a86:	2205      	movs	r2, #5
    1a88:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a8e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a92:	4770      	bx	lr
    1a94:	e000ed90 	.word	0xe000ed90

00001a98 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1a98:	4a11      	ldr	r2, [pc, #68]	; (1ae0 <arm_mpu_init+0x48>)
{
    1a9a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1a9c:	6814      	ldr	r4, [r2, #0]
    1a9e:	2c08      	cmp	r4, #8
    1aa0:	d81b      	bhi.n	1ada <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    1aa2:	4910      	ldr	r1, [pc, #64]	; (1ae4 <arm_mpu_init+0x4c>)
    1aa4:	6850      	ldr	r0, [r2, #4]
    1aa6:	2300      	movs	r3, #0
    1aa8:	604b      	str	r3, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1aaa:	429c      	cmp	r4, r3
    1aac:	f100 000c 	add.w	r0, r0, #12
    1ab0:	d103      	bne.n	1aba <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    1ab2:	f7ff ffe7 	bl	1a84 <arm_core_mpu_enable>
    1ab6:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1ab8:	bd10      	pop	{r4, pc}
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1aba:	608b      	str	r3, [r1, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1abc:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    1ac0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1ac4:	431a      	orrs	r2, r3
    1ac6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1aca:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1acc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    1ad0:	f042 0201 	orr.w	r2, r2, #1
    1ad4:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1ad6:	3301      	adds	r3, #1
    1ad8:	e7e7      	b.n	1aaa <arm_mpu_init+0x12>
		return -1;
    1ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ade:	e7eb      	b.n	1ab8 <arm_mpu_init+0x20>
    1ae0:	2000135c 	.word	0x2000135c
    1ae4:	e000ed90 	.word	0xe000ed90

00001ae8 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    1ae8:	3901      	subs	r1, #1
    1aea:	4603      	mov	r3, r0
    1aec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1af0:	b90a      	cbnz	r2, 1af6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1af2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1af4:	4770      	bx	lr
		*d = *s;
    1af6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    1afa:	e7f7      	b.n	1aec <strcpy+0x4>

00001afc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1afc:	3801      	subs	r0, #1
    1afe:	3901      	subs	r1, #1
    1b00:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b08:	4293      	cmp	r3, r2
    1b0a:	d101      	bne.n	1b10 <strcmp+0x14>
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d1f7      	bne.n	1b00 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1b10:	1a98      	subs	r0, r3, r2
    1b12:	4770      	bx	lr

00001b14 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    1b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1b16:	ea81 0400 	eor.w	r4, r1, r0
    1b1a:	07a5      	lsls	r5, r4, #30
    1b1c:	4603      	mov	r3, r0
    1b1e:	d00b      	beq.n	1b38 <memcpy+0x24>
    1b20:	3b01      	subs	r3, #1
    1b22:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1b24:	4291      	cmp	r1, r2
    1b26:	d11a      	bne.n	1b5e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    1b2a:	2a00      	cmp	r2, #0
    1b2c:	d0fc      	beq.n	1b28 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    1b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1b32:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1b36:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1b38:	079c      	lsls	r4, r3, #30
    1b3a:	d1f6      	bne.n	1b2a <memcpy+0x16>
    1b3c:	0895      	lsrs	r5, r2, #2
    1b3e:	00ac      	lsls	r4, r5, #2
    1b40:	1f1e      	subs	r6, r3, #4
    1b42:	190f      	adds	r7, r1, r4
		while (n >= sizeof(unsigned int)) {
    1b44:	42b9      	cmp	r1, r7
    1b46:	d105      	bne.n	1b54 <memcpy+0x40>
    1b48:	f06f 0603 	mvn.w	r6, #3
    1b4c:	fb06 2205 	mla	r2, r6, r5, r2
    1b50:	4423      	add	r3, r4
    1b52:	e7e5      	b.n	1b20 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    1b54:	f851 cb04 	ldr.w	ip, [r1], #4
    1b58:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(unsigned int);
    1b5c:	e7f2      	b.n	1b44 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    1b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1b62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    1b66:	e7dd      	b.n	1b24 <memcpy+0x10>

00001b68 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1b68:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1b6a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1b6c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1b6e:	079c      	lsls	r4, r3, #30
    1b70:	d110      	bne.n	1b94 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1b72:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1b76:	ea44 4504 	orr.w	r5, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1b7a:	0894      	lsrs	r4, r2, #2
    1b7c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    1b80:	42b3      	cmp	r3, r6
    1b82:	d10d      	bne.n	1ba0 <memset+0x38>
    1b84:	f06f 0503 	mvn.w	r5, #3
    1b88:	fb05 2404 	mla	r4, r5, r4, r2
    1b8c:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1b8e:	42a3      	cmp	r3, r4
    1b90:	d109      	bne.n	1ba6 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1b92:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1b94:	2a00      	cmp	r2, #0
    1b96:	d0fc      	beq.n	1b92 <memset+0x2a>
		*(d_byte++) = c_byte;
    1b98:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1b9c:	3a01      	subs	r2, #1
    1b9e:	e7e6      	b.n	1b6e <memset+0x6>
		*(d_word++) = c_word;
    1ba0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(unsigned int);
    1ba4:	e7ec      	b.n	1b80 <memset+0x18>
		*(d_byte++) = c_byte;
    1ba6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1baa:	e7f0      	b.n	1b8e <memset+0x26>

00001bac <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bb0:	4770      	bx	lr
	...

00001bb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1bb4:	4b01      	ldr	r3, [pc, #4]	; (1bbc <__stdout_hook_install+0x8>)
    1bb6:	6018      	str	r0, [r3, #0]
}
    1bb8:	4770      	bx	lr
    1bba:	bf00      	nop
    1bbc:	20001380 	.word	0x20001380

00001bc0 <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
    1bc0:	b510      	push	{r4, lr}
	return port->config->config_info;
    1bc2:	6804      	ldr	r4, [r0, #0]
    1bc4:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1bc6:	68a4      	ldr	r4, [r4, #8]
    1bc8:	69c0      	ldr	r0, [r0, #28]
    1bca:	6824      	ldr	r4, [r4, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
    1bcc:	2901      	cmp	r1, #1
    1bce:	d104      	bne.n	1bda <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    1bd0:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    1bd2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
    1bd6:	2000      	movs	r0, #0
    1bd8:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    1bda:	3300      	adds	r3, #0
    1bdc:	fa20 f002 	lsr.w	r0, r0, r2
    1be0:	f04f 0101 	mov.w	r1, #1
    1be4:	bf18      	it	ne
    1be6:	2301      	movne	r3, #1
    1be8:	f000 0001 	and.w	r0, r0, #1
    1bec:	4091      	lsls	r1, r2
    1bee:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1bf0:	bf14      	ite	ne
    1bf2:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    1bf6:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    1bfa:	e7ec      	b.n	1bd6 <gpio_nrfx_write+0x16>

00001bfc <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
    1bfc:	b510      	push	{r4, lr}
	return port->config->config_info;
    1bfe:	6804      	ldr	r4, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    1c00:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1c02:	68a4      	ldr	r4, [r4, #8]
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    1c04:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1c06:	6824      	ldr	r4, [r4, #0]
    return p_reg->IN;
    1c08:	f8d4 4510 	ldr.w	r4, [r4, #1296]	; 0x510

	if (access_op == GPIO_ACCESS_BY_PORT) {
    1c0c:	2901      	cmp	r1, #1
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    1c0e:	ea80 0004 	eor.w	r0, r0, r4
		*value = port_in;
	} else {
		*value = (port_in & BIT(pin)) ? 1 : 0;
    1c12:	bf1c      	itt	ne
    1c14:	40d0      	lsrne	r0, r2
    1c16:	f000 0001 	andne.w	r0, r0, #1
    1c1a:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    1c1c:	2000      	movs	r0, #0
    1c1e:	bd10      	pop	{r4, pc}

00001c20 <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
    1c20:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1c22:	6818      	ldr	r0, [r3, #0]
    1c24:	b172      	cbz	r2, 1c44 <gpio_nrfx_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    1c26:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    1c28:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1c2a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    1c2c:	b902      	cbnz	r2, 1c30 <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
    1c2e:	6059      	str	r1, [r3, #4]
	return 0;
}
    1c30:	2000      	movs	r0, #0
    1c32:	4770      	bx	lr
	parent->next = child;
    1c34:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    1c36:	6858      	ldr	r0, [r3, #4]
    1c38:	4288      	cmp	r0, r1
	list->tail = node;
    1c3a:	bf08      	it	eq
    1c3c:	605a      	streq	r2, [r3, #4]
    1c3e:	e00d      	b.n	1c5c <gpio_nrfx_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    1c40:	4602      	mov	r2, r0
    1c42:	6800      	ldr	r0, [r0, #0]
    1c44:	2800      	cmp	r0, #0
    1c46:	d0f3      	beq.n	1c30 <gpio_nrfx_manage_callback+0x10>
    1c48:	4288      	cmp	r0, r1
    1c4a:	d1f9      	bne.n	1c40 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_REMOVE(slist, snode)
    1c4c:	6808      	ldr	r0, [r1, #0]
    1c4e:	2a00      	cmp	r2, #0
    1c50:	d1f0      	bne.n	1c34 <gpio_nrfx_manage_callback+0x14>
    1c52:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1c54:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    1c56:	428a      	cmp	r2, r1
    1c58:	d100      	bne.n	1c5c <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
    1c5a:	6058      	str	r0, [r3, #4]
	parent->next = child;
    1c5c:	2300      	movs	r3, #0
    1c5e:	600b      	str	r3, [r1, #0]
    1c60:	e7e6      	b.n	1c30 <gpio_nrfx_manage_callback+0x10>
	...

00001c64 <gpio_nrfx_init>:
		}
	}
}

static int gpio_nrfx_init(struct device *port)
{
    1c64:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1c66:	4b09      	ldr	r3, [pc, #36]	; (1c8c <gpio_nrfx_init+0x28>)
    1c68:	781a      	ldrb	r2, [r3, #0]
    1c6a:	b96a      	cbnz	r2, 1c88 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1c6c:	2101      	movs	r1, #1
    1c6e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(CONFIG_GPIOTE_IRQ, CONFIG_GPIOTE_IRQ_PRI,
    1c70:	2006      	movs	r0, #6
    1c72:	2105      	movs	r1, #5
    1c74:	f7ff fdce 	bl	1814 <_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(CONFIG_GPIOTE_IRQ);
    1c78:	2006      	movs	r0, #6
    1c7a:	f7ff fda7 	bl	17cc <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    1c7e:	4b04      	ldr	r3, [pc, #16]	; (1c90 <gpio_nrfx_init+0x2c>)
    1c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1c84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1c88:	2000      	movs	r0, #0
    1c8a:	bd08      	pop	{r3, pc}
    1c8c:	20000420 	.word	0x20000420
    1c90:	40006000 	.word	0x40006000

00001c94 <check_level_trigger_pins.constprop.13>:
	struct gpio_nrfx_data *data = get_port_data(port);
    1c94:	4a0b      	ldr	r2, [pc, #44]	; (1cc4 <check_level_trigger_pins.constprop.13+0x30>)
    1c96:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    1c98:	6812      	ldr	r2, [r2, #0]
	u32_t port_in = nrf_gpio_port_in_read(get_port_cfg(port)->port);
    1c9a:	6892      	ldr	r2, [r2, #8]
    1c9c:	6812      	ldr	r2, [r2, #0]
static u32_t check_level_trigger_pins(struct device *port)
    1c9e:	b510      	push	{r4, lr}
    1ca0:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	out &= ~data->trig_edge & ~data->double_edge;
    1ca4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    1ca8:	4311      	orrs	r1, r2
    1caa:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    1cae:	4002      	ands	r2, r0
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1cb0:	69d8      	ldr	r0, [r3, #28]
    1cb2:	691b      	ldr	r3, [r3, #16]
    1cb4:	4058      	eors	r0, r3
	out &= ~data->trig_edge & ~data->double_edge;
    1cb6:	ea22 0201 	bic.w	r2, r2, r1
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1cba:	4060      	eors	r0, r4
}
    1cbc:	ea22 0000 	bic.w	r0, r2, r0
    1cc0:	bd10      	pop	{r4, pc}
    1cc2:	bf00      	nop
    1cc4:	200013e0 	.word	0x200013e0

00001cc8 <gpiote_event_handler>:
{
    1cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    1cca:	4d23      	ldr	r5, [pc, #140]	; (1d58 <gpiote_event_handler+0x90>)
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    1ccc:	682b      	ldr	r3, [r5, #0]
    1cce:	2b01      	cmp	r3, #1
    1cd0:	d131      	bne.n	1d36 <gpiote_event_handler+0x6e>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    1cd2:	f7ff ffdf 	bl	1c94 <check_level_trigger_pins.constprop.13>
    1cd6:	4606      	mov	r6, r0
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1cd8:	2300      	movs	r3, #0
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    1cda:	4c20      	ldr	r4, [pc, #128]	; (1d5c <gpiote_event_handler+0x94>)
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    1cdc:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1cde:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    1ce0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
    1ce4:	fa07 f103 	lsl.w	r1, r7, r3
    1ce8:	4211      	tst	r1, r2
    1cea:	d014      	beq.n	1d16 <gpiote_event_handler+0x4e>
    return ((uint32_t)NRF_GPIOTE + event);
    1cec:	009a      	lsls	r2, r3, #2
    1cee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1cf2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    1cf6:	6811      	ldr	r1, [r2, #0]
    1cf8:	2901      	cmp	r1, #1
    1cfa:	d10c      	bne.n	1d16 <gpiote_event_handler+0x4e>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1cfc:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    1d00:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1d04:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    1d08:	6812      	ldr	r2, [r2, #0]
    1d0a:	9200      	str	r2, [sp, #0]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d0c:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
    1d10:	4081      	lsls	r1, r0
    (void)dummy;
    1d12:	9a00      	ldr	r2, [sp, #0]
    1d14:	430e      	orrs	r6, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d16:	3301      	adds	r3, #1
    1d18:	2b08      	cmp	r3, #8
    1d1a:	d1e1      	bne.n	1ce0 <gpiote_event_handler+0x18>
	if (fired_triggers[0]) {
    1d1c:	b96e      	cbnz	r6, 1d3a <gpiote_event_handler+0x72>
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    1d1e:	682b      	ldr	r3, [r5, #0]
    1d20:	2b01      	cmp	r3, #1
    1d22:	d106      	bne.n	1d32 <gpiote_event_handler+0x6a>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0)) |
    1d24:	f7ff ffb6 	bl	1c94 <check_level_trigger_pins.constprop.13>
		if (active_level_triggers == 0) {
    1d28:	b918      	cbnz	r0, 1d32 <gpiote_event_handler+0x6a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1d2a:	6028      	str	r0, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    1d2c:	682b      	ldr	r3, [r5, #0]
    1d2e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1d30:	9b01      	ldr	r3, [sp, #4]
}
    1d32:	b003      	add	sp, #12
    1d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1d36:	2600      	movs	r6, #0
    1d38:	e7ce      	b.n	1cd8 <gpiote_event_handler+0x10>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    1d3a:	4f09      	ldr	r7, [pc, #36]	; (1d60 <gpiote_event_handler+0x98>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1d3c:	68bb      	ldr	r3, [r7, #8]
    1d3e:	681c      	ldr	r4, [r3, #0]
    1d40:	2c00      	cmp	r4, #0
    1d42:	d0ec      	beq.n	1d1e <gpiote_event_handler+0x56>
		if (cb->pin_mask & pins) {
    1d44:	68a3      	ldr	r3, [r4, #8]
    1d46:	421e      	tst	r6, r3
    1d48:	d004      	beq.n	1d54 <gpiote_event_handler+0x8c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1d4a:	6863      	ldr	r3, [r4, #4]
    1d4c:	4632      	mov	r2, r6
    1d4e:	4621      	mov	r1, r4
    1d50:	4638      	mov	r0, r7
    1d52:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1d54:	6824      	ldr	r4, [r4, #0]
	return node->next;
    1d56:	e7f3      	b.n	1d40 <gpiote_event_handler+0x78>
    1d58:	4000617c 	.word	0x4000617c
    1d5c:	40006000 	.word	0x40006000
    1d60:	200013e0 	.word	0x200013e0

00001d64 <gpiote_pin_int_cfg>:
{
    1d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    1d66:	6803      	ldr	r3, [r0, #0]
    return (NRF_GPIOTE->INTENSET & mask);
    1d68:	4d5a      	ldr	r5, [pc, #360]	; (1ed4 <gpiote_pin_int_cfg+0x170>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d6a:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    1d6c:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d6e:	791a      	ldrb	r2, [r3, #4]
    1d70:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    1d74:	f001 031f 	and.w	r3, r1, #31
    1d78:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    1d7c:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d7e:	2200      	movs	r2, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d80:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    1d84:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    1d88:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    1d8c:	42b3      	cmp	r3, r6
    1d8e:	d179      	bne.n	1e84 <gpiote_pin_int_cfg+0x120>
		    && (intenset & BIT(i))) {
    1d90:	fa20 f602 	lsr.w	r6, r0, r2
    1d94:	07f6      	lsls	r6, r6, #31
    1d96:	d575      	bpl.n	1e84 <gpiote_pin_int_cfg+0x120>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1d98:	0090      	lsls	r0, r2, #2
    1d9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    1d9e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    1da2:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    1da6:	f026 0601 	bic.w	r6, r6, #1
    1daa:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    1dae:	2001      	movs	r0, #1
    1db0:	fa00 f202 	lsl.w	r2, r0, r2
    NRF_GPIOTE->INTENCLR = mask;
    1db4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    1db8:	009a      	lsls	r2, r3, #2
    1dba:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1dbe:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    1dc2:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    1dc6:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1dca:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    1dce:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    1dd2:	68a0      	ldr	r0, [r4, #8]
    1dd4:	40c8      	lsrs	r0, r1
    1dd6:	f010 0001 	ands.w	r0, r0, #1
    1dda:	d051      	beq.n	1e80 <gpiote_pin_int_cfg+0x11c>
    1ddc:	68e0      	ldr	r0, [r4, #12]
    1dde:	40c8      	lsrs	r0, r1
    1de0:	f010 0001 	ands.w	r0, r0, #1
    1de4:	d04c      	beq.n	1e80 <gpiote_pin_int_cfg+0x11c>
		if (data->trig_edge & BIT(pin)) {
    1de6:	6960      	ldr	r0, [r4, #20]
    1de8:	40c8      	lsrs	r0, r1
    1dea:	f010 0001 	ands.w	r0, r0, #1
    1dee:	d056      	beq.n	1e9e <gpiote_pin_int_cfg+0x13a>
			if (data->double_edge & BIT(pin)) {
    1df0:	69a2      	ldr	r2, [r4, #24]
    1df2:	40ca      	lsrs	r2, r1
    1df4:	07d2      	lsls	r2, r2, #31
    1df6:	d44a      	bmi.n	1e8e <gpiote_pin_int_cfg+0x12a>
			} else if (((data->active_level & BIT(pin)) != 0)
    1df8:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1dfa:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
    1dfc:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1dfe:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0)
    1e02:	f002 0201 	and.w	r2, r2, #1
    1e06:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    1e0a:	428a      	cmp	r2, r1
    1e0c:	bf14      	ite	ne
    1e0e:	2101      	movne	r1, #1
    1e10:	2102      	moveq	r1, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    1e12:	4d30      	ldr	r5, [pc, #192]	; (1ed4 <gpiote_pin_int_cfg+0x170>)
    1e14:	2400      	movs	r4, #0
    1e16:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    1e1a:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    1e1e:	f010 0003 	ands.w	r0, r0, #3
    1e22:	d136      	bne.n	1e92 <gpiote_pin_int_cfg+0x12e>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1e24:	00a2      	lsls	r2, r4, #2
    1e26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1e2a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e2e:	021b      	lsls	r3, r3, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1e30:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e34:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    1e38:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1e3c:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_events_t evt =
    1e40:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1e44:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    1e48:	009b      	lsls	r3, r3, #2
    1e4a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)NRF_GPIOTE + event);
    1e4e:	b29b      	uxth	r3, r3
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e50:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)NRF_GPIOTE + event);
    1e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1e58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e5c:	4331      	orrs	r1, r6
    1e5e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1e62:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    1e64:	681b      	ldr	r3, [r3, #0]
    1e66:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1e68:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1e6a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    1e6e:	f043 0301 	orr.w	r3, r3, #1
    1e72:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    1e76:	2301      	movs	r3, #1
    1e78:	fa03 f404 	lsl.w	r4, r3, r4
    NRF_GPIOTE->INTENSET = mask;
    1e7c:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    1e80:	b002      	add	sp, #8
    1e82:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1e84:	3201      	adds	r2, #1
    1e86:	2a08      	cmp	r2, #8
    1e88:	f47f af7a 	bne.w	1d80 <gpiote_pin_int_cfg+0x1c>
    1e8c:	e794      	b.n	1db8 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1e8e:	2103      	movs	r1, #3
    1e90:	e7bf      	b.n	1e12 <gpiote_pin_int_cfg+0xae>
    1e92:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1e94:	2c08      	cmp	r4, #8
    1e96:	d1be      	bne.n	1e16 <gpiote_pin_int_cfg+0xb2>
	return -ENODEV;
    1e98:	f06f 0012 	mvn.w	r0, #18
    1e9c:	e7f0      	b.n	1e80 <gpiote_pin_int_cfg+0x11c>
			if (((data->active_level & BIT(pin)) != 0)
    1e9e:	6923      	ldr	r3, [r4, #16]
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    1ea0:	69e4      	ldr	r4, [r4, #28]
			if (((data->active_level & BIT(pin)) != 0)
    1ea2:	40cb      	lsrs	r3, r1
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    1ea4:	fa24 f101 	lsr.w	r1, r4, r1
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    1ea8:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
    1eac:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    1eb0:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1eb4:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
			if (((data->active_level & BIT(pin)) != 0)
    1eb8:	f003 0301 	and.w	r3, r3, #1
    1ebc:	f001 0101 	and.w	r1, r1, #1
    1ec0:	428b      	cmp	r3, r1
    1ec2:	bf14      	ite	ne
    1ec4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    1ec8:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    1ecc:	4323      	orrs	r3, r4
    1ece:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    1ed2:	e7d5      	b.n	1e80 <gpiote_pin_int_cfg+0x11c>
    1ed4:	40006000 	.word	0x40006000

00001ed8 <gpio_nrfx_config>:
{
    1ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1edc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    1ede:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1ee0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    1ee4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    1ee8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1eea:	d041      	beq.n	1f70 <gpio_nrfx_config+0x98>
    1eec:	dc09      	bgt.n	1f02 <gpio_nrfx_config+0x2a>
    1eee:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1ef2:	d03f      	beq.n	1f74 <gpio_nrfx_config+0x9c>
    1ef4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    1ef8:	d03e      	beq.n	1f78 <gpio_nrfx_config+0xa0>
    1efa:	b190      	cbz	r0, 1f22 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    1efc:	f06f 0015 	mvn.w	r0, #21
    1f00:	e033      	b.n	1f6a <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1f02:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    1f06:	d039      	beq.n	1f7c <gpio_nrfx_config+0xa4>
    1f08:	dc04      	bgt.n	1f14 <gpio_nrfx_config+0x3c>
    1f0a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    1f0e:	d1f5      	bne.n	1efc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    1f10:	2003      	movs	r0, #3
    1f12:	e006      	b.n	1f22 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1f14:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    1f18:	d032      	beq.n	1f80 <gpio_nrfx_config+0xa8>
    1f1a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    1f1e:	d1ed      	bne.n	1efc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    1f20:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1f22:	f406 7740 	and.w	r7, r6, #768	; 0x300
    1f26:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    1f2a:	d02b      	beq.n	1f84 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    1f2c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    1f30:	4263      	negs	r3, r4
    1f32:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    1f34:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    1f38:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    1f3c:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1f3e:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    1f42:	bf18      	it	ne
    1f44:	b2d4      	uxtbne	r4, r2
    1f46:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    1f4a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    1f4e:	bf12      	itee	ne
    1f50:	46a1      	movne	r9, r4
		to_pin   = 31;
    1f52:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0;
    1f56:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f58:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    1f5c:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1f60:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    1f64:	45a1      	cmp	r9, r4
    1f66:	d20f      	bcs.n	1f88 <gpio_nrfx_config+0xb0>
	return 0;
    1f68:	2000      	movs	r0, #0
}
    1f6a:	b003      	add	sp, #12
    1f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    1f70:	2002      	movs	r0, #2
    1f72:	e7d6      	b.n	1f22 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    1f74:	2001      	movs	r0, #1
    1f76:	e7d4      	b.n	1f22 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    1f78:	2004      	movs	r0, #4
    1f7a:	e7d2      	b.n	1f22 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    1f7c:	2005      	movs	r0, #5
    1f7e:	e7d0      	b.n	1f22 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    1f80:	2006      	movs	r0, #6
    1f82:	e7ce      	b.n	1f22 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    1f84:	2303      	movs	r3, #3
    1f86:	e7d5      	b.n	1f34 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    1f88:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    1f8c:	6892      	ldr	r2, [r2, #8]
    1f8e:	7911      	ldrb	r1, [r2, #4]
    1f90:	f004 021f 	and.w	r2, r4, #31
    1f94:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    1f98:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    1f9c:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1fa0:	fa0b f204 	lsl.w	r2, fp, r4
    1fa4:	68a9      	ldr	r1, [r5, #8]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d025      	beq.n	1ff6 <gpio_nrfx_config+0x11e>
    1faa:	4311      	orrs	r1, r2
    1fac:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    1fae:	6969      	ldr	r1, [r5, #20]
    1fb0:	9301      	str	r3, [sp, #4]
    1fb2:	06b0      	lsls	r0, r6, #26
    1fb4:	bf4c      	ite	mi
    1fb6:	4311      	orrmi	r1, r2
    1fb8:	4391      	bicpl	r1, r2
    1fba:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    1fbc:	69a9      	ldr	r1, [r5, #24]
    1fbe:	0670      	lsls	r0, r6, #25
    1fc0:	bf4c      	ite	mi
    1fc2:	4311      	orrmi	r1, r2
    1fc4:	4391      	bicpl	r1, r2
    1fc6:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    1fc8:	6929      	ldr	r1, [r5, #16]
    1fca:	0770      	lsls	r0, r6, #29
    1fcc:	bf4c      	ite	mi
    1fce:	4311      	orrmi	r1, r2
    1fd0:	4391      	bicpl	r1, r2
    1fd2:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    1fd4:	69e9      	ldr	r1, [r5, #28]
    1fd6:	0630      	lsls	r0, r6, #24
    1fd8:	bf4c      	ite	mi
    1fda:	430a      	orrmi	r2, r1
    1fdc:	ea21 0202 	bicpl.w	r2, r1, r2
    1fe0:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    1fe2:	4621      	mov	r1, r4
    1fe4:	4640      	mov	r0, r8
    1fe6:	f7ff febd 	bl	1d64 <gpiote_pin_int_cfg>
		if (res != 0) {
    1fea:	2800      	cmp	r0, #0
    1fec:	d1bd      	bne.n	1f6a <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    1fee:	3401      	adds	r4, #1
    1ff0:	b2e4      	uxtb	r4, r4
    1ff2:	9b01      	ldr	r3, [sp, #4]
    1ff4:	e7b6      	b.n	1f64 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1ff6:	ea21 0102 	bic.w	r1, r1, r2
    1ffa:	e7d7      	b.n	1fac <gpio_nrfx_config+0xd4>

00001ffc <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    1ffc:	2901      	cmp	r1, #1
{
    1ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2002:	bf18      	it	ne
    2004:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2006:	6887      	ldr	r7, [r0, #8]
{
    2008:	4606      	mov	r6, r0
		to_pin   = pin;
    200a:	bf12      	itee	ne
    200c:	4625      	movne	r5, r4
		to_pin   = 31;
    200e:	251f      	moveq	r5, #31
		from_pin = 0;
    2010:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2012:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2016:	42ac      	cmp	r4, r5
    2018:	d902      	bls.n	2020 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    201a:	2000      	movs	r0, #0
}
    201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	fa08 f204 	lsl.w	r2, r8, r4
    2026:	ea23 0302 	bic.w	r3, r3, r2
    202a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    202c:	4621      	mov	r1, r4
    202e:	4630      	mov	r0, r6
    2030:	f7ff fe98 	bl	1d64 <gpiote_pin_int_cfg>
		if (res != 0) {
    2034:	2800      	cmp	r0, #0
    2036:	d1f1      	bne.n	201c <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2038:	3401      	adds	r4, #1
    203a:	b2e4      	uxtb	r4, r4
    203c:	e7eb      	b.n	2016 <gpio_nrfx_pin_disable_callback+0x1a>

0000203e <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    203e:	2901      	cmp	r1, #1
{
    2040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2044:	bf18      	it	ne
    2046:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2048:	6887      	ldr	r7, [r0, #8]
{
    204a:	4606      	mov	r6, r0
		to_pin   = pin;
    204c:	bf12      	itee	ne
    204e:	4625      	movne	r5, r4
		to_pin   = 31;
    2050:	251f      	moveq	r5, #31
		from_pin = 0;
    2052:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2054:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2058:	42ac      	cmp	r4, r5
    205a:	d902      	bls.n	2062 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    205c:	2000      	movs	r0, #0
}
    205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	fa08 f204 	lsl.w	r2, r8, r4
    2068:	4313      	orrs	r3, r2
    206a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    206c:	4621      	mov	r1, r4
    206e:	4630      	mov	r0, r6
    2070:	f7ff fe78 	bl	1d64 <gpiote_pin_int_cfg>
		if (res != 0) {
    2074:	2800      	cmp	r0, #0
    2076:	d1f2      	bne.n	205e <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2078:	3401      	adds	r4, #1
    207a:	b2e4      	uxtb	r4, r4
    207c:	e7ec      	b.n	2058 <gpio_nrfx_pin_enable_callback+0x1a>
	...

00002080 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
    2080:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    2082:	4b07      	ldr	r3, [pc, #28]	; (20a0 <_sys_device_do_config_level+0x20>)
    2084:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2088:	3001      	adds	r0, #1
    208a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    208e:	42a5      	cmp	r5, r4
    2090:	d800      	bhi.n	2094 <_sys_device_do_config_level+0x14>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
    2092:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
    2094:	6823      	ldr	r3, [r4, #0]
    2096:	4620      	mov	r0, r4
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	4798      	blx	r3
								info++) {
    209c:	340c      	adds	r4, #12
    209e:	e7f6      	b.n	208e <_sys_device_do_config_level+0xe>
    20a0:	000031fc 	.word	0x000031fc

000020a4 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    20a4:	4b10      	ldr	r3, [pc, #64]	; (20e8 <device_get_binding+0x44>)
{
    20a6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    20a8:	4c10      	ldr	r4, [pc, #64]	; (20ec <device_get_binding+0x48>)
{
    20aa:	4605      	mov	r5, r0
    20ac:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    20ae:	429c      	cmp	r4, r3
    20b0:	d104      	bne.n	20bc <device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    20b2:	4c0e      	ldr	r4, [pc, #56]	; (20ec <device_get_binding+0x48>)
    20b4:	42b4      	cmp	r4, r6
    20b6:	d109      	bne.n	20cc <device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    20b8:	2400      	movs	r4, #0
    20ba:	e012      	b.n	20e2 <device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    20bc:	6862      	ldr	r2, [r4, #4]
    20be:	b11a      	cbz	r2, 20c8 <device_get_binding+0x24>
		    (info->config->name == name)) {
    20c0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    20c2:	6812      	ldr	r2, [r2, #0]
    20c4:	42aa      	cmp	r2, r5
    20c6:	d00c      	beq.n	20e2 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    20c8:	340c      	adds	r4, #12
    20ca:	e7f0      	b.n	20ae <device_get_binding+0xa>
		if (info->driver_api == NULL) {
    20cc:	6863      	ldr	r3, [r4, #4]
    20ce:	b90b      	cbnz	r3, 20d4 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    20d0:	340c      	adds	r4, #12
    20d2:	e7ef      	b.n	20b4 <device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    20d4:	6823      	ldr	r3, [r4, #0]
    20d6:	4628      	mov	r0, r5
    20d8:	6819      	ldr	r1, [r3, #0]
    20da:	f7ff fd0f 	bl	1afc <strcmp>
    20de:	2800      	cmp	r0, #0
    20e0:	d1f6      	bne.n	20d0 <device_get_binding+0x2c>
}
    20e2:	4620      	mov	r0, r4
    20e4:	bd70      	pop	{r4, r5, r6, pc}
    20e6:	bf00      	nop
    20e8:	200013ec 	.word	0x200013ec
    20ec:	2000138c 	.word	0x2000138c

000020f0 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	z_clock_idle_exit();
    20f0:	f7ff b960 	b.w	13b4 <z_clock_idle_exit>

000020f4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    20f4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    20f6:	4d0a      	ldr	r5, [pc, #40]	; (2120 <idle+0x2c>)
    20f8:	f04f 0220 	mov.w	r2, #32
    20fc:	f3ef 8311 	mrs	r3, BASEPRI
    2100:	f382 8811 	msr	BASEPRI, r2
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle(_get_next_timeout_expiry());
    2104:	f000 fcda 	bl	2abc <_get_next_timeout_expiry>
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    2108:	2101      	movs	r1, #1
    210a:	2802      	cmp	r0, #2
		sys_power_save_idle(_get_next_timeout_expiry());
    210c:	4604      	mov	r4, r0
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    210e:	bfd8      	it	le
    2110:	4608      	movle	r0, r1
    2112:	f7ff f94b 	bl	13ac <z_clock_set_timeout>
	_kernel.idle = ticks;
    2116:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    2118:	f7ff fbc4 	bl	18a4 <k_cpu_idle>
    211c:	e7ec      	b.n	20f8 <idle+0x4>
    211e:	bf00      	nop
    2120:	200005e8 	.word	0x200005e8

00002124 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    2124:	4802      	ldr	r0, [pc, #8]	; (2130 <_bss_zero+0xc>)
    2126:	4a03      	ldr	r2, [pc, #12]	; (2134 <_bss_zero+0x10>)
    2128:	2100      	movs	r1, #0
    212a:	1a12      	subs	r2, r2, r0
    212c:	f7ff bd1c 	b.w	1b68 <memset>
    2130:	20000000 	.word	0x20000000
    2134:	20000618 	.word	0x20000618

00002138 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2138:	4802      	ldr	r0, [pc, #8]	; (2144 <_data_copy+0xc>)
    213a:	4a03      	ldr	r2, [pc, #12]	; (2148 <_data_copy+0x10>)
    213c:	4903      	ldr	r1, [pc, #12]	; (214c <_data_copy+0x14>)
    213e:	1a12      	subs	r2, r2, r0
    2140:	f7ff bce8 	b.w	1b14 <memcpy>
    2144:	20001358 	.word	0x20001358
    2148:	20001400 	.word	0x20001400
    214c:	00003254 	.word	0x00003254

00002150 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2150:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2152:	2002      	movs	r0, #2
    2154:	f7ff ff94 	bl	2080 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    2158:	4807      	ldr	r0, [pc, #28]	; (2178 <bg_thread_main+0x28>)
    215a:	f7fe fd1d 	bl	b98 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    215e:	2003      	movs	r0, #3
    2160:	f7ff ff8e 	bl	2080 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    2164:	f000 fc1c 	bl	29a0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    2168:	f7fe fb38 	bl	7dc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    216c:	4a03      	ldr	r2, [pc, #12]	; (217c <bg_thread_main+0x2c>)
    216e:	7b13      	ldrb	r3, [r2, #12]
    2170:	f023 0301 	bic.w	r3, r3, #1
    2174:	7313      	strb	r3, [r2, #12]
}
    2176:	bd08      	pop	{r3, pc}
    2178:	00003224 	.word	0x00003224
    217c:	200004b0 	.word	0x200004b0

00002180 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    2180:	b580      	push	{r7, lr}
    2182:	b086      	sub	sp, #24
    2184:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    2186:	f7ff f989 	bl	149c <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    218a:	4b31      	ldr	r3, [pc, #196]	; (2250 <_Cstart+0xd0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    218c:	f383 8808 	msr	MSP, r3
    2190:	4b30      	ldr	r3, [pc, #192]	; (2254 <_Cstart+0xd4>)
	_kernel.ready_q.cache = _main_thread;
    2192:	4e31      	ldr	r6, [pc, #196]	; (2258 <_Cstart+0xd8>)
    2194:	4d31      	ldr	r5, [pc, #196]	; (225c <_Cstart+0xdc>)
    2196:	2400      	movs	r4, #0
    2198:	22e0      	movs	r2, #224	; 0xe0
    219a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    219e:	77dc      	strb	r4, [r3, #31]
    21a0:	761c      	strb	r4, [r3, #24]
    21a2:	765c      	strb	r4, [r3, #25]
    21a4:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    21a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    21a8:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    21ac:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    21ae:	f7ff fb05 	bl	17bc <_FaultInit>
	_CpuIdleInit();
    21b2:	f7ff fb71 	bl	1898 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    21b6:	4620      	mov	r0, r4
    21b8:	f7ff ff62 	bl	2080 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    21bc:	2001      	movs	r0, #1
    21be:	f7ff ff5f 	bl	2080 <_sys_device_do_config_level>
	_sched_init();
    21c2:	f000 fac1 	bl	2748 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    21c6:	4b26      	ldr	r3, [pc, #152]	; (2260 <_Cstart+0xe0>)
	_kernel.ready_q.cache = _main_thread;
    21c8:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
    21ca:	9305      	str	r3, [sp, #20]
    21cc:	2301      	movs	r3, #1
    21ce:	e9cd 4303 	strd	r4, r3, [sp, #12]
    21d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    21d6:	9400      	str	r4, [sp, #0]
    21d8:	4b22      	ldr	r3, [pc, #136]	; (2264 <_Cstart+0xe4>)
    21da:	4923      	ldr	r1, [pc, #140]	; (2268 <_Cstart+0xe8>)
    21dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21e0:	4628      	mov	r0, r5
    21e2:	f000 fba5 	bl	2930 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21e6:	7b6b      	ldrb	r3, [r5, #13]
    21e8:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    21ec:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21f0:	736a      	strb	r2, [r5, #13]
	return state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    21f2:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    21f4:	d105      	bne.n	2202 <_Cstart+0x82>
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
    21f6:	6a2b      	ldr	r3, [r5, #32]
    21f8:	3301      	adds	r3, #1
    21fa:	d102      	bne.n	2202 <_Cstart+0x82>
		_add_thread_to_ready_q(thread);
    21fc:	4628      	mov	r0, r5
    21fe:	f000 f9c1 	bl	2584 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    2202:	4b1a      	ldr	r3, [pc, #104]	; (226c <_Cstart+0xec>)
    2204:	4e1a      	ldr	r6, [pc, #104]	; (2270 <_Cstart+0xf0>)
    2206:	9305      	str	r3, [sp, #20]
    2208:	2201      	movs	r2, #1
    220a:	230f      	movs	r3, #15
    220c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2210:	2300      	movs	r3, #0
    2212:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2216:	9300      	str	r3, [sp, #0]
    2218:	f44f 72a0 	mov.w	r2, #320	; 0x140
    221c:	4b15      	ldr	r3, [pc, #84]	; (2274 <_Cstart+0xf4>)
    221e:	4916      	ldr	r1, [pc, #88]	; (2278 <_Cstart+0xf8>)
    2220:	4630      	mov	r0, r6
    2222:	f000 fb85 	bl	2930 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2226:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    2228:	60e6      	str	r6, [r4, #12]
    222a:	f023 0304 	bic.w	r3, r3, #4
    222e:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2230:	4b12      	ldr	r3, [pc, #72]	; (227c <_Cstart+0xfc>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    2232:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
    2234:	e9c4 3306 	strd	r3, r3, [r4, #24]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    2238:	4a0a      	ldr	r2, [pc, #40]	; (2264 <_Cstart+0xe4>)
    223a:	4b11      	ldr	r3, [pc, #68]	; (2280 <_Cstart+0x100>)
    223c:	4c11      	ldr	r4, [pc, #68]	; (2284 <_Cstart+0x104>)
    223e:	f383 8809 	msr	PSP, r3
    2242:	b663      	cpsie	if
    2244:	2100      	movs	r1, #0
    2246:	f381 8811 	msr	BASEPRI, r1
    224a:	4610      	mov	r0, r2
    224c:	4720      	bx	r4
		  "r"(main_thread)

		: "r0", "r1", "sp"
	);

	CODE_UNREACHABLE;
    224e:	bf00      	nop
    2250:	20001358 	.word	0x20001358
    2254:	e000ed00 	.word	0xe000ed00
    2258:	200005e8 	.word	0x200005e8
    225c:	200004b0 	.word	0x200004b0
    2260:	00003214 	.word	0x00003214
    2264:	00002151 	.word	0x00002151
    2268:	20000618 	.word	0x20000618
    226c:	00003219 	.word	0x00003219
    2270:	20000444 	.word	0x20000444
    2274:	000020f5 	.word	0x000020f5
    2278:	20000a18 	.word	0x20000a18
    227c:	20000600 	.word	0x20000600
    2280:	20000a18 	.word	0x20000a18
    2284:	00000869 	.word	0x00000869

00002288 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    2288:	b570      	push	{r4, r5, r6, lr}
    228a:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    228c:	492e      	ldr	r1, [pc, #184]	; (2348 <_impl_k_mutex_lock+0xc0>)
    228e:	688a      	ldr	r2, [r1, #8]
    2290:	7bd3      	ldrb	r3, [r2, #15]
    2292:	3b01      	subs	r3, #1
    2294:	4604      	mov	r4, r0
    2296:	73d3      	strb	r3, [r2, #15]
	u32_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2298:	68c3      	ldr	r3, [r0, #12]
    229a:	4608      	mov	r0, r1
    229c:	b14b      	cbz	r3, 22b2 <_impl_k_mutex_lock+0x2a>
    229e:	68a2      	ldr	r2, [r4, #8]
    22a0:	6889      	ldr	r1, [r1, #8]
    22a2:	428a      	cmp	r2, r1
    22a4:	d011      	beq.n	22ca <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    22a6:	b995      	cbnz	r5, 22ce <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
    22a8:	f000 f932 	bl	2510 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    22ac:	f06f 000f 	mvn.w	r0, #15
    22b0:	e00a      	b.n	22c8 <_impl_k_mutex_lock+0x40>
					_current->base.prio :
    22b2:	688a      	ldr	r2, [r1, #8]
    22b4:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    22b8:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
    22ba:	3301      	adds	r3, #1
    22bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    22be:	6883      	ldr	r3, [r0, #8]
    22c0:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    22c2:	f000 f925 	bl	2510 <k_sched_unlock>
		return 0;
    22c6:	2000      	movs	r0, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    22c8:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    22ca:	6922      	ldr	r2, [r4, #16]
    22cc:	e7f4      	b.n	22b8 <_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    22ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
    22d2:	f992 300e 	ldrsb.w	r3, [r2, #14]
    22d6:	4299      	cmp	r1, r3
    22d8:	bfa8      	it	ge
    22da:	4619      	movge	r1, r3
    22dc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    22e0:	f04f 0320 	mov.w	r3, #32
    22e4:	f3ef 8611 	mrs	r6, BASEPRI
    22e8:	f383 8811 	msr	BASEPRI, r3
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    22ec:	68a0      	ldr	r0, [r4, #8]
    22ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    22f2:	4299      	cmp	r1, r3
    22f4:	da01      	bge.n	22fa <_impl_k_mutex_lock+0x72>
		_thread_priority_set(mutex->owner, new_prio);
    22f6:	f000 f9fb 	bl	26f0 <_thread_priority_set>
	s32_t got_mutex = _pend_current_thread(key, &mutex->wait_q, timeout);
    22fa:	462a      	mov	r2, r5
    22fc:	4621      	mov	r1, r4
    22fe:	4630      	mov	r0, r6
    2300:	f000 f9e8 	bl	26d4 <_pend_current_thread>
	if (got_mutex == 0) {
    2304:	2800      	cmp	r0, #0
    2306:	d0dc      	beq.n	22c2 <_impl_k_mutex_lock+0x3a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2308:	6823      	ldr	r3, [r4, #0]
    230a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    230c:	429c      	cmp	r4, r3
    230e:	d007      	beq.n	2320 <_impl_k_mutex_lock+0x98>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    2310:	b133      	cbz	r3, 2320 <_impl_k_mutex_lock+0x98>
    2312:	f993 300e 	ldrsb.w	r3, [r3, #14]
    2316:	4299      	cmp	r1, r3
    2318:	bfa8      	it	ge
    231a:	4619      	movge	r1, r3
    231c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    2320:	f04f 0320 	mov.w	r3, #32
    2324:	f3ef 8511 	mrs	r5, BASEPRI
    2328:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
    232c:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    232e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2332:	4299      	cmp	r1, r3
    2334:	d001      	beq.n	233a <_impl_k_mutex_lock+0xb2>
		_thread_priority_set(mutex->owner, new_prio);
    2336:	f000 f9db 	bl	26f0 <_thread_priority_set>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    233a:	f385 8811 	msr	BASEPRI, r5
	k_sched_unlock();
    233e:	f000 f8e7 	bl	2510 <k_sched_unlock>
	return -EAGAIN;
    2342:	f06f 000a 	mvn.w	r0, #10
    2346:	e7bf      	b.n	22c8 <_impl_k_mutex_lock+0x40>
    2348:	200005e8 	.word	0x200005e8

0000234c <_impl_k_mutex_unlock>:
    234c:	4b1b      	ldr	r3, [pc, #108]	; (23bc <_impl_k_mutex_unlock+0x70>)
    234e:	689a      	ldr	r2, [r3, #8]
    2350:	7bd3      	ldrb	r3, [r2, #15]
    2352:	3b01      	subs	r3, #1
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2354:	b570      	push	{r4, r5, r6, lr}
    2356:	4604      	mov	r4, r0
    2358:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    235a:	68c3      	ldr	r3, [r0, #12]
    235c:	3b01      	subs	r3, #1
    235e:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0U) {
    2360:	bb3b      	cbnz	r3, 23b2 <_impl_k_mutex_unlock+0x66>
	__asm__ volatile(
    2362:	f04f 0320 	mov.w	r3, #32
    2366:	f3ef 8611 	mrs	r6, BASEPRI
    236a:	f383 8811 	msr	BASEPRI, r3
		goto k_mutex_unlock_return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    236e:	6901      	ldr	r1, [r0, #16]
    2370:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2372:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2376:	4299      	cmp	r1, r3
    2378:	d001      	beq.n	237e <_impl_k_mutex_unlock+0x32>
		_thread_priority_set(mutex->owner, new_prio);
    237a:	f000 f9b9 	bl	26f0 <_thread_priority_set>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
    237e:	4620      	mov	r0, r4
    2380:	f000 f89f 	bl	24c2 <_unpend_first_thread>
    2384:	4605      	mov	r5, r0

	mutex->owner = new_owner;
    2386:	60a0      	str	r0, [r4, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
    2388:	b188      	cbz	r0, 23ae <_impl_k_mutex_unlock+0x62>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    238a:	7b43      	ldrb	r3, [r0, #13]
    238c:	06db      	lsls	r3, r3, #27
    238e:	d104      	bne.n	239a <_impl_k_mutex_unlock+0x4e>
	if (_is_thread_ready(thread)) {
    2390:	6a03      	ldr	r3, [r0, #32]
    2392:	3301      	adds	r3, #1
    2394:	d101      	bne.n	239a <_impl_k_mutex_unlock+0x4e>
		_add_thread_to_ready_q(thread);
    2396:	f000 f8f5 	bl	2584 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    239a:	f386 8811 	msr	BASEPRI, r6
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    239e:	2300      	movs	r3, #0
    23a0:	66ab      	str	r3, [r5, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->lock_count++;
    23a2:	68e3      	ldr	r3, [r4, #12]
    23a4:	3301      	adds	r3, #1
    23a6:	60e3      	str	r3, [r4, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    23a8:	f995 300e 	ldrsb.w	r3, [r5, #14]
    23ac:	6123      	str	r3, [r4, #16]
    23ae:	f386 8811 	msr	BASEPRI, r6

	irq_unlock(key);

k_mutex_unlock_return:
	k_sched_unlock();
}
    23b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    23b6:	f000 b8ab 	b.w	2510 <k_sched_unlock>
    23ba:	bf00      	nop
    23bc:	200005e8 	.word	0x200005e8

000023c0 <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
    23c0:	b510      	push	{r4, lr}
	int to = _get_next_timeout_expiry();
    23c2:	f000 fb7b 	bl	2abc <_get_next_timeout_expiry>
    23c6:	4604      	mov	r4, r0

	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    23c8:	f7fe fff1 	bl	13ae <z_clock_elapsed>
    23cc:	4b07      	ldr	r3, [pc, #28]	; (23ec <reset_time_slice+0x2c>)
    23ce:	4a08      	ldr	r2, [pc, #32]	; (23f0 <reset_time_slice+0x30>)
    23d0:	681b      	ldr	r3, [r3, #0]
    23d2:	4418      	add	r0, r3
    23d4:	6110      	str	r0, [r2, #16]

	if (to == K_FOREVER || slice_time < to) {
    23d6:	1c62      	adds	r2, r4, #1
    23d8:	d001      	beq.n	23de <reset_time_slice+0x1e>
    23da:	42a3      	cmp	r3, r4
    23dc:	da05      	bge.n	23ea <reset_time_slice+0x2a>
		z_clock_set_timeout(slice_time, false);
    23de:	2100      	movs	r1, #0
    23e0:	4618      	mov	r0, r3
	}
}
    23e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_clock_set_timeout(slice_time, false);
    23e6:	f7fe bfe1 	b.w	13ac <z_clock_set_timeout>
}
    23ea:	bd10      	pop	{r4, pc}
    23ec:	20000520 	.word	0x20000520
    23f0:	200005e8 	.word	0x200005e8

000023f4 <k_spin_lock.isra.10>:
	__asm__ volatile(
    23f4:	f04f 0320 	mov.w	r3, #32
    23f8:	f3ef 8011 	mrs	r0, BASEPRI
    23fc:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    2400:	4770      	bx	lr
	...

00002404 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
    2404:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    2406:	4c10      	ldr	r4, [pc, #64]	; (2448 <update_cache+0x44>)
    2408:	4623      	mov	r3, r4
    240a:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    240e:	429d      	cmp	r5, r3
    2410:	d000      	beq.n	2414 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
    2412:	b905      	cbnz	r5, 2416 <update_cache+0x12>
    2414:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok) {
    2416:	68a3      	ldr	r3, [r4, #8]
    2418:	b978      	cbnz	r0, 243a <update_cache+0x36>
	if (!_current || !_is_thread_ready(_current)) {
    241a:	b173      	cbz	r3, 243a <update_cache+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    241c:	7b5a      	ldrb	r2, [r3, #13]
    241e:	06d2      	lsls	r2, r2, #27
    2420:	d10b      	bne.n	243a <update_cache+0x36>
    2422:	6a1a      	ldr	r2, [r3, #32]
    2424:	3201      	adds	r2, #1
    2426:	d108      	bne.n	243a <update_cache+0x36>
	if (_is_preempt(_current) || is_metairq(th)) {
    2428:	89da      	ldrh	r2, [r3, #14]
    242a:	2a7f      	cmp	r2, #127	; 0x7f
    242c:	d905      	bls.n	243a <update_cache+0x36>
	return thread == _idle_thread;
    242e:	4a07      	ldr	r2, [pc, #28]	; (244c <update_cache+0x48>)
	if (_is_idle(_current)) {
    2430:	6812      	ldr	r2, [r2, #0]
    2432:	4293      	cmp	r3, r2
    2434:	d001      	beq.n	243a <update_cache+0x36>
		if (th != _current) {
			reset_time_slice();
		}
		_kernel.ready_q.cache = th;
	} else {
		_kernel.ready_q.cache = _current;
    2436:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    2438:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    243a:	42ab      	cmp	r3, r5
    243c:	d001      	beq.n	2442 <update_cache+0x3e>
			reset_time_slice();
    243e:	f7ff ffbf 	bl	23c0 <reset_time_slice>
		_kernel.ready_q.cache = th;
    2442:	6265      	str	r5, [r4, #36]	; 0x24
}
    2444:	e7f8      	b.n	2438 <update_cache+0x34>
    2446:	bf00      	nop
    2448:	200005e8 	.word	0x200005e8
    244c:	00003220 	.word	0x00003220

00002450 <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    2450:	b510      	push	{r4, lr}
    2452:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    2454:	f7ff ffce 	bl	23f4 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
    2458:	7b53      	ldrb	r3, [r2, #13]
    245a:	0659      	lsls	r1, r3, #25
	LOCKED(&sched_lock) {
    245c:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    245e:	d50e      	bpl.n	247e <_remove_thread_from_ready_q+0x2e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2460:	e9d2 3100 	ldrd	r3, r1, [r2]
    2464:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
    2466:	6059      	str	r1, [r3, #4]
	thread->base.thread_state &= ~states;
    2468:	7b53      	ldrb	r3, [r2, #13]
    246a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    246e:	7353      	strb	r3, [r2, #13]
			_priq_run_remove(&_kernel.ready_q.runq, thread);
			_mark_thread_as_not_queued(thread);
			update_cache(thread == _current);
    2470:	4b04      	ldr	r3, [pc, #16]	; (2484 <_remove_thread_from_ready_q+0x34>)
    2472:	6898      	ldr	r0, [r3, #8]
    2474:	1a83      	subs	r3, r0, r2
    2476:	4258      	negs	r0, r3
    2478:	4158      	adcs	r0, r3
    247a:	f7ff ffc3 	bl	2404 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    247e:	f384 8811 	msr	BASEPRI, r4
		}
	}
}
    2482:	bd10      	pop	{r4, pc}
    2484:	200005e8 	.word	0x200005e8

00002488 <_find_first_thread_to_unpend>:
	return thread->base.pended_on;
}

struct k_thread *_find_first_thread_to_unpend(_wait_q_t *wait_q,
					      struct k_thread *from)
{
    2488:	b508      	push	{r3, lr}
    248a:	4602      	mov	r2, r0
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_lock) {
    248c:	f7ff ffb2 	bl	23f4 <k_spin_lock.isra.10>
	return list->head == list;
    2490:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2492:	429a      	cmp	r2, r3
    2494:	bf08      	it	eq
    2496:	2300      	moveq	r3, #0
    2498:	f380 8811 	msr	BASEPRI, r0
		ret = _priq_wait_best(&wait_q->waitq);
	}

	return ret;
}
    249c:	4618      	mov	r0, r3
    249e:	bd08      	pop	{r3, pc}

000024a0 <_unpend_thread_no_timeout>:

void _unpend_thread_no_timeout(struct k_thread *thread)
{
    24a0:	b508      	push	{r3, lr}
    24a2:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    24a4:	f7ff ffa6 	bl	23f4 <k_spin_lock.isra.10>
	node->prev->next = node->next;
    24a8:	e9d2 3100 	ldrd	r3, r1, [r2]
    24ac:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
    24ae:	6059      	str	r1, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    24b0:	7b53      	ldrb	r3, [r2, #13]
    24b2:	f023 0302 	bic.w	r3, r3, #2
    24b6:	7353      	strb	r3, [r2, #13]
    24b8:	f380 8811 	msr	BASEPRI, r0
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
		_mark_thread_as_not_pending(thread);
	}

	thread->base.pended_on = NULL;
    24bc:	2300      	movs	r3, #0
    24be:	6093      	str	r3, [r2, #8]
}
    24c0:	bd08      	pop	{r3, pc}

000024c2 <_unpend_first_thread>:
	pend(_current, wait_q, timeout);
	return _Swap(key);
}

struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    24c2:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    24c4:	2100      	movs	r1, #0
    24c6:	f7ff ffdf 	bl	2488 <_find_first_thread_to_unpend>

	if (thread != NULL) {
    24ca:	4604      	mov	r4, r0
    24cc:	b128      	cbz	r0, 24da <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    24ce:	f7ff ffe7 	bl	24a0 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    24d2:	f104 0018 	add.w	r0, r4, #24
    24d6:	f000 fae1 	bl	2a9c <_abort_timeout>
	if (t != NULL) {
		(void)_abort_thread_timeout(t);
	}

	return t;
}
    24da:	4620      	mov	r0, r4
    24dc:	bd10      	pop	{r4, pc}
	...

000024e0 <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    24e0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    24e4:	2b0d      	cmp	r3, #13
    24e6:	d80b      	bhi.n	2500 <_reschedule+0x20>
    24e8:	b11b      	cbz	r3, 24f2 <_reschedule+0x12>
    24ea:	4b07      	ldr	r3, [pc, #28]	; (2508 <_reschedule+0x28>)
    24ec:	685b      	ldr	r3, [r3, #4]
    24ee:	051b      	lsls	r3, r3, #20
    24f0:	d506      	bpl.n	2500 <_reschedule+0x20>

#ifdef CONFIG_SMP
	(void)_Swap(key);
	return;
#else
	if (_get_next_ready_thread() != _current) {
    24f2:	4b06      	ldr	r3, [pc, #24]	; (250c <_reschedule+0x2c>)
    24f4:	689a      	ldr	r2, [r3, #8]
    24f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24f8:	429a      	cmp	r2, r3
    24fa:	d001      	beq.n	2500 <_reschedule+0x20>
    24fc:	f7fe bfda 	b.w	14b4 <__swap>
    2500:	f380 8811 	msr	BASEPRI, r0
	}
#endif

 noswap:
	irq_unlock(key);
}
    2504:	4770      	bx	lr
    2506:	bf00      	nop
    2508:	e000ed00 	.word	0xe000ed00
    250c:	200005e8 	.word	0x200005e8

00002510 <k_sched_unlock>:
		_sched_lock();
	}
}

void k_sched_unlock(void)
{
    2510:	b510      	push	{r4, lr}
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(_current->base.sched_locked != 0, "");
	__ASSERT(!_is_in_isr(), "");

	LOCKED(&sched_lock) {
    2512:	f7ff ff6f 	bl	23f4 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
    2516:	4b0a      	ldr	r3, [pc, #40]	; (2540 <k_sched_unlock+0x30>)
    2518:	689a      	ldr	r2, [r3, #8]
    251a:	7bd3      	ldrb	r3, [r2, #15]
    251c:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    251e:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    2520:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    2522:	2001      	movs	r0, #1
    2524:	f7ff ff6e 	bl	2404 <update_cache>
    2528:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    252c:	f04f 0320 	mov.w	r3, #32
    2530:	f3ef 8011 	mrs	r0, BASEPRI
    2534:	f383 8811 	msr	BASEPRI, r3
	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule(irq_lock());
#endif
}
    2538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    253c:	f7ff bfd0 	b.w	24e0 <_reschedule>
    2540:	200005e8 	.word	0x200005e8

00002544 <_priq_dumb_add>:
	return list->head == list;
    2544:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2546:	4298      	cmp	r0, r3
	return _current->switch_handle;
}
#endif

void _priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
    2548:	b510      	push	{r4, lr}
    254a:	d106      	bne.n	255a <_priq_dumb_add+0x16>
	node->prev = list->tail;
    254c:	6843      	ldr	r3, [r0, #4]
    254e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    2550:	6843      	ldr	r3, [r0, #4]
	node->next = list;
    2552:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
    2554:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2556:	6041      	str	r1, [r0, #4]
			return;
		}
	}

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}
    2558:	bd10      	pop	{r4, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    255a:	2b00      	cmp	r3, #0
    255c:	d0f6      	beq.n	254c <_priq_dumb_add+0x8>
	if (t1->base.prio < t2->base.prio) {
    255e:	f991 200e 	ldrsb.w	r2, [r1, #14]
    2562:	f993 400e 	ldrsb.w	r4, [r3, #14]
    2566:	4294      	cmp	r4, r2
    2568:	dd05      	ble.n	2576 <_priq_dumb_add+0x32>
		node->prev = insert_point->prev;
    256a:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    256c:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    2570:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    2572:	6059      	str	r1, [r3, #4]
    2574:	e7f0      	b.n	2558 <_priq_dumb_add+0x14>
	return (node == list->tail) ? NULL : node->next;
    2576:	6844      	ldr	r4, [r0, #4]
    2578:	42a3      	cmp	r3, r4
    257a:	d0e7      	beq.n	254c <_priq_dumb_add+0x8>
    257c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    257e:	2b00      	cmp	r3, #0
    2580:	d1ef      	bne.n	2562 <_priq_dumb_add+0x1e>
    2582:	e7e3      	b.n	254c <_priq_dumb_add+0x8>

00002584 <_add_thread_to_ready_q>:
{
    2584:	b538      	push	{r3, r4, r5, lr}
    2586:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    2588:	f7ff ff34 	bl	23f4 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    258c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    258e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    2590:	4806      	ldr	r0, [pc, #24]	; (25ac <_add_thread_to_ready_q+0x28>)
    2592:	f7ff ffd7 	bl	2544 <_priq_dumb_add>
	thread->base.thread_state |= states;
    2596:	7b63      	ldrb	r3, [r4, #13]
    2598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    259c:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    259e:	2000      	movs	r0, #0
    25a0:	f7ff ff30 	bl	2404 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    25a4:	f385 8811 	msr	BASEPRI, r5
}
    25a8:	bd38      	pop	{r3, r4, r5, pc}
    25aa:	bf00      	nop
    25ac:	20000610 	.word	0x20000610

000025b0 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    25b0:	7b42      	ldrb	r2, [r0, #13]
    25b2:	06d2      	lsls	r2, r2, #27
    25b4:	d104      	bne.n	25c0 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    25b6:	6a03      	ldr	r3, [r0, #32]
    25b8:	3301      	adds	r3, #1
    25ba:	d101      	bne.n	25c0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    25bc:	f7ff bfe2 	b.w	2584 <_add_thread_to_ready_q>
}
    25c0:	4770      	bx	lr

000025c2 <z_thread_timeout>:
{
    25c2:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
    25c4:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    25c8:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    25ca:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    25ce:	b113      	cbz	r3, 25d6 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
    25d0:	4628      	mov	r0, r5
    25d2:	f7ff ff65 	bl	24a0 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    25d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    25da:	f023 0304 	bic.w	r3, r3, #4
    25de:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
    25e2:	4628      	mov	r0, r5
}
    25e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
    25e8:	f7ff bfe2 	b.w	25b0 <_ready_thread>

000025ec <_move_thread_to_end_of_prio_q>:
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    25f0:	f7ff ff00 	bl	23f4 <k_spin_lock.isra.10>
	node->prev->next = node->next;
    25f4:	e9d4 3200 	ldrd	r3, r2, [r4]
		_priq_run_add(&_kernel.ready_q.runq, thread);
    25f8:	4d0a      	ldr	r5, [pc, #40]	; (2624 <_move_thread_to_end_of_prio_q+0x38>)
    25fa:	6013      	str	r3, [r2, #0]
    25fc:	4621      	mov	r1, r4
	node->next->prev = node->prev;
    25fe:	605a      	str	r2, [r3, #4]
	LOCKED(&sched_lock) {
    2600:	4606      	mov	r6, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    2602:	4628      	mov	r0, r5
    2604:	f7ff ff9e 	bl	2544 <_priq_dumb_add>
	thread->base.thread_state |= states;
    2608:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    260a:	f855 0c20 	ldr.w	r0, [r5, #-32]
    260e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2612:	7363      	strb	r3, [r4, #13]
    2614:	1b03      	subs	r3, r0, r4
    2616:	4258      	negs	r0, r3
    2618:	4158      	adcs	r0, r3
    261a:	f7ff fef3 	bl	2404 <update_cache>
    261e:	f386 8811 	msr	BASEPRI, r6
}
    2622:	bd70      	pop	{r4, r5, r6, pc}
    2624:	20000610 	.word	0x20000610

00002628 <z_time_slice>:
	if (slice_time && sliceable(_current)) {
    2628:	4b11      	ldr	r3, [pc, #68]	; (2670 <z_time_slice+0x48>)
    262a:	681b      	ldr	r3, [r3, #0]
{
    262c:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
    262e:	b1eb      	cbz	r3, 266c <z_time_slice+0x44>
    2630:	4910      	ldr	r1, [pc, #64]	; (2674 <z_time_slice+0x4c>)
    2632:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
    2634:	89da      	ldrh	r2, [r3, #14]
    2636:	2a7f      	cmp	r2, #127	; 0x7f
    2638:	d818      	bhi.n	266c <z_time_slice+0x44>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
    263a:	4a0f      	ldr	r2, [pc, #60]	; (2678 <z_time_slice+0x50>)
    263c:	f993 400e 	ldrsb.w	r4, [r3, #14]
    2640:	6812      	ldr	r2, [r2, #0]
    2642:	4294      	cmp	r4, r2
    2644:	db12      	blt.n	266c <z_time_slice+0x44>
	return thread == _idle_thread;
    2646:	4a0d      	ldr	r2, [pc, #52]	; (267c <z_time_slice+0x54>)
		&& !_is_idle(t)
    2648:	6812      	ldr	r2, [r2, #0]
    264a:	4293      	cmp	r3, r2
    264c:	d00e      	beq.n	266c <z_time_slice+0x44>
		&& !_is_thread_timeout_active(t);
    264e:	6a1a      	ldr	r2, [r3, #32]
    2650:	3201      	adds	r2, #1
    2652:	d10b      	bne.n	266c <z_time_slice+0x44>
		if (ticks >= _current_cpu->slice_ticks) {
    2654:	690a      	ldr	r2, [r1, #16]
    2656:	4282      	cmp	r2, r0
    2658:	dc06      	bgt.n	2668 <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
    265a:	4618      	mov	r0, r3
    265c:	f7ff ffc6 	bl	25ec <_move_thread_to_end_of_prio_q>
}
    2660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    2664:	f7ff beac 	b.w	23c0 <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
    2668:	1a12      	subs	r2, r2, r0
    266a:	610a      	str	r2, [r1, #16]
}
    266c:	bd10      	pop	{r4, pc}
    266e:	bf00      	nop
    2670:	20000520 	.word	0x20000520
    2674:	200005e8 	.word	0x200005e8
    2678:	2000051c 	.word	0x2000051c
    267c:	00003220 	.word	0x00003220

00002680 <pend>:
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	4604      	mov	r4, r0
    2684:	460d      	mov	r5, r1
    2686:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
    2688:	f7ff fee2 	bl	2450 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    268c:	7b63      	ldrb	r3, [r4, #13]
    268e:	f043 0302 	orr.w	r3, r3, #2
    2692:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    2694:	b125      	cbz	r5, 26a0 <pend+0x20>
		thread->base.pended_on = wait_q;
    2696:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
    2698:	4621      	mov	r1, r4
    269a:	4628      	mov	r0, r5
    269c:	f7ff ff52 	bl	2544 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
    26a0:	1c73      	adds	r3, r6, #1
    26a2:	d012      	beq.n	26ca <pend+0x4a>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    26a4:	4809      	ldr	r0, [pc, #36]	; (26cc <pend+0x4c>)
    26a6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    26aa:	2100      	movs	r1, #0
    26ac:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    26b0:	fbc5 0106 	smlal	r0, r1, r5, r6
    26b4:	2300      	movs	r3, #0
    26b6:	f7fd fdad 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    26ba:	4905      	ldr	r1, [pc, #20]	; (26d0 <pend+0x50>)
    26bc:	1c42      	adds	r2, r0, #1
    26be:	f104 0018 	add.w	r0, r4, #24
}
    26c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    26c6:	f000 ba27 	b.w	2b18 <_add_timeout>
    26ca:	bd70      	pop	{r4, r5, r6, pc}
    26cc:	0004ffff 	.word	0x0004ffff
    26d0:	000025c3 	.word	0x000025c3

000026d4 <_pend_current_thread>:
{
    26d4:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    26d6:	4b05      	ldr	r3, [pc, #20]	; (26ec <_pend_current_thread+0x18>)
{
    26d8:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    26da:	6898      	ldr	r0, [r3, #8]
    26dc:	f7ff ffd0 	bl	2680 <pend>
    26e0:	4620      	mov	r0, r4
}
    26e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    26e6:	f7fe bee5 	b.w	14b4 <__swap>
    26ea:	bf00      	nop
    26ec:	200005e8 	.word	0x200005e8

000026f0 <_thread_priority_set>:
{
    26f0:	b510      	push	{r4, lr}
    26f2:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    26f4:	f7ff fe7e 	bl	23f4 <k_spin_lock.isra.10>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    26f8:	7b53      	ldrb	r3, [r2, #13]
    26fa:	06db      	lsls	r3, r3, #27
    26fc:	4604      	mov	r4, r0
	return state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    26fe:	b249      	sxtb	r1, r1
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    2700:	d11c      	bne.n	273c <_thread_priority_set+0x4c>
		if (need_sched) {
    2702:	6a13      	ldr	r3, [r2, #32]
    2704:	3301      	adds	r3, #1
    2706:	d119      	bne.n	273c <_thread_priority_set+0x4c>
	node->prev->next = node->next;
    2708:	e9d2 3000 	ldrd	r3, r0, [r2]
    270c:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
    270e:	6058      	str	r0, [r3, #4]
			thread->base.prio = prio;
    2710:	7391      	strb	r1, [r2, #14]
			_priq_run_add(&_kernel.ready_q.runq, thread);
    2712:	480c      	ldr	r0, [pc, #48]	; (2744 <_thread_priority_set+0x54>)
    2714:	4611      	mov	r1, r2
    2716:	f7ff ff15 	bl	2544 <_priq_dumb_add>
			update_cache(1);
    271a:	2001      	movs	r0, #1
    271c:	f7ff fe72 	bl	2404 <update_cache>
    2720:	2301      	movs	r3, #1
    2722:	f384 8811 	msr	BASEPRI, r4
	if (need_sched) {
    2726:	b163      	cbz	r3, 2742 <_thread_priority_set+0x52>
	__asm__ volatile(
    2728:	f04f 0320 	mov.w	r3, #32
    272c:	f3ef 8011 	mrs	r0, BASEPRI
    2730:	f383 8811 	msr	BASEPRI, r3
}
    2734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_reschedule(irq_lock());
    2738:	f7ff bed2 	b.w	24e0 <_reschedule>
			thread->base.prio = prio;
    273c:	7391      	strb	r1, [r2, #14]
    273e:	2300      	movs	r3, #0
    2740:	e7ef      	b.n	2722 <_thread_priority_set+0x32>
}
    2742:	bd10      	pop	{r4, pc}
    2744:	20000610 	.word	0x20000610

00002748 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <_sched_init+0x18>)
    274a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    274e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	slice_time = _ms_to_ticks(duration_in_ms);
    2752:	4a04      	ldr	r2, [pc, #16]	; (2764 <_sched_init+0x1c>)
    2754:	2300      	movs	r3, #0
    2756:	6013      	str	r3, [r2, #0]
	slice_max_prio = prio;
    2758:	4a03      	ldr	r2, [pc, #12]	; (2768 <_sched_init+0x20>)
    275a:	6013      	str	r3, [r2, #0]
	reset_time_slice();
    275c:	f7ff be30 	b.w	23c0 <reset_time_slice>
    2760:	200005e8 	.word	0x200005e8
    2764:	20000520 	.word	0x20000520
    2768:	2000051c 	.word	0x2000051c

0000276c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    276c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    276e:	4c13      	ldr	r4, [pc, #76]	; (27bc <_impl_k_yield+0x50>)
    2770:	4b13      	ldr	r3, [pc, #76]	; (27c0 <_impl_k_yield+0x54>)
    2772:	68a2      	ldr	r2, [r4, #8]
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	429a      	cmp	r2, r3
    2778:	d010      	beq.n	279c <_impl_k_yield+0x30>
		LOCKED(&sched_lock) {
    277a:	f7ff fe3b 	bl	23f4 <k_spin_lock.isra.10>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
    277e:	68a1      	ldr	r1, [r4, #8]
	node->prev->next = node->next;
    2780:	e9d1 3200 	ldrd	r3, r2, [r1]
		LOCKED(&sched_lock) {
    2784:	4605      	mov	r5, r0
    2786:	6013      	str	r3, [r2, #0]
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2788:	f104 0028 	add.w	r0, r4, #40	; 0x28
	node->next->prev = node->prev;
    278c:	605a      	str	r2, [r3, #4]
    278e:	f7ff fed9 	bl	2544 <_priq_dumb_add>
			update_cache(1);
    2792:	2001      	movs	r0, #1
    2794:	f7ff fe36 	bl	2404 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2798:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    279c:	68a2      	ldr	r2, [r4, #8]
    279e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27a0:	429a      	cmp	r2, r3
    27a2:	d009      	beq.n	27b8 <_impl_k_yield+0x4c>
	__asm__ volatile(
    27a4:	f04f 0320 	mov.w	r3, #32
    27a8:	f3ef 8011 	mrs	r0, BASEPRI
    27ac:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
    27b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    27b4:	f7fe be7e 	b.w	14b4 <__swap>
    27b8:	bd38      	pop	{r3, r4, r5, pc}
    27ba:	bf00      	nop
    27bc:	200005e8 	.word	0x200005e8
    27c0:	00003220 	.word	0x00003220

000027c4 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    27c6:	4604      	mov	r4, r0
    27c8:	b918      	cbnz	r0, 27d2 <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    27ca:	f7ff ffcf 	bl	276c <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    27ce:	4620      	mov	r0, r4
    27d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27d2:	4819      	ldr	r0, [pc, #100]	; (2838 <_impl_k_sleep+0x74>)
    27d4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    27d8:	2100      	movs	r1, #0
    27da:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    27de:	2300      	movs	r3, #0
    27e0:	fbc5 0104 	smlal	r0, r1, r5, r4
    27e4:	f7fd fd16 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    27e8:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    27ea:	f000 fa2f 	bl	2c4c <z_tick_get_32>
    27ee:	182c      	adds	r4, r5, r0
    27f0:	f04f 0320 	mov.w	r3, #32
    27f4:	f3ef 8711 	mrs	r7, BASEPRI
    27f8:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    27fc:	4e0f      	ldr	r6, [pc, #60]	; (283c <_impl_k_sleep+0x78>)
    27fe:	68b0      	ldr	r0, [r6, #8]
    2800:	f7ff fe26 	bl	2450 <_remove_thread_from_ready_q>
    2804:	68b0      	ldr	r0, [r6, #8]
    2806:	490e      	ldr	r1, [pc, #56]	; (2840 <_impl_k_sleep+0x7c>)
    2808:	462a      	mov	r2, r5
    280a:	3018      	adds	r0, #24
    280c:	f000 f984 	bl	2b18 <_add_timeout>
    2810:	4638      	mov	r0, r7
    2812:	f7fe fe4f 	bl	14b4 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    2816:	f000 fa19 	bl	2c4c <z_tick_get_32>
    281a:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    281c:	2800      	cmp	r0, #0
    281e:	dd09      	ble.n	2834 <_impl_k_sleep+0x70>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2824:	2264      	movs	r2, #100	; 0x64
    2826:	2300      	movs	r3, #0
    2828:	fb80 0101 	smull	r0, r1, r0, r1
    282c:	f7fd fd42 	bl	2b4 <__aeabi_uldivmod>
    2830:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    2832:	e7cc      	b.n	27ce <_impl_k_sleep+0xa>
	return 0;
    2834:	2400      	movs	r4, #0
    2836:	e7ca      	b.n	27ce <_impl_k_sleep+0xa>
    2838:	0004ffff 	.word	0x0004ffff
    283c:	200005e8 	.word	0x200005e8
    2840:	000025c3 	.word	0x000025c3

00002844 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    2844:	4b01      	ldr	r3, [pc, #4]	; (284c <_impl_k_current_get+0x8>)
    2846:	6898      	ldr	r0, [r3, #8]
    2848:	4770      	bx	lr
    284a:	bf00      	nop
    284c:	200005e8 	.word	0x200005e8

00002850 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    2850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2852:	4605      	mov	r5, r0
    2854:	460f      	mov	r7, r1
    2856:	f04f 0320 	mov.w	r3, #32
    285a:	f3ef 8411 	mrs	r4, BASEPRI
    285e:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
    2862:	480a      	ldr	r0, [pc, #40]	; (288c <schedule_new_thread.part.8+0x3c>)
    2864:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2868:	2100      	movs	r1, #0
    286a:	2300      	movs	r3, #0
    286c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    2870:	fbc6 0107 	smlal	r0, r1, r6, r7
    2874:	f7fd fcce 	bl	214 <__aeabi_ldivmod>
    2878:	4905      	ldr	r1, [pc, #20]	; (2890 <schedule_new_thread.part.8+0x40>)
    287a:	1c42      	adds	r2, r0, #1
    287c:	f105 0018 	add.w	r0, r5, #24
    2880:	f000 f94a 	bl	2b18 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2884:	f384 8811 	msr	BASEPRI, r4
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    2888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    288a:	bf00      	nop
    288c:	0004ffff 	.word	0x0004ffff
    2890:	000025c3 	.word	0x000025c3

00002894 <_ready_thread>:
    2894:	7b42      	ldrb	r2, [r0, #13]
    2896:	06d2      	lsls	r2, r2, #27
    2898:	d104      	bne.n	28a4 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    289a:	6a03      	ldr	r3, [r0, #32]
    289c:	3301      	adds	r3, #1
    289e:	d101      	bne.n	28a4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    28a0:	f7ff be70 	b.w	2584 <_add_thread_to_ready_q>
}
    28a4:	4770      	bx	lr
	...

000028a8 <k_is_in_isr>:
    28a8:	f3ef 8005 	mrs	r0, IPSR
    28ac:	280d      	cmp	r0, #13
    28ae:	d807      	bhi.n	28c0 <k_is_in_isr+0x18>
    28b0:	b138      	cbz	r0, 28c2 <k_is_in_isr+0x1a>
    28b2:	4b04      	ldr	r3, [pc, #16]	; (28c4 <k_is_in_isr+0x1c>)
    28b4:	6858      	ldr	r0, [r3, #4]
    28b6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    28ba:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    28be:	4770      	bx	lr
    28c0:	2001      	movs	r0, #1
}
    28c2:	4770      	bx	lr
    28c4:	e000ed00 	.word	0xe000ed00

000028c8 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    28c8:	4b02      	ldr	r3, [pc, #8]	; (28d4 <_is_thread_essential+0xc>)
    28ca:	689b      	ldr	r3, [r3, #8]
    28cc:	7b18      	ldrb	r0, [r3, #12]
}
    28ce:	f000 0001 	and.w	r0, r0, #1
    28d2:	4770      	bx	lr
    28d4:	200005e8 	.word	0x200005e8

000028d8 <k_busy_wait>:
{
    28d8:	4601      	mov	r1, r0
    28da:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
    28dc:	4a07      	ldr	r2, [pc, #28]	; (28fc <k_busy_wait+0x24>)
    28de:	2300      	movs	r3, #0
    28e0:	03c0      	lsls	r0, r0, #15
    28e2:	0c49      	lsrs	r1, r1, #17
    28e4:	f7fd fce6 	bl	2b4 <__aeabi_uldivmod>
    28e8:	4604      	mov	r4, r0
	u32_t start_cycles = k_cycle_get_32();
    28ea:	f7fe fdb9 	bl	1460 <_timer_cycle_get_32>
    28ee:	4605      	mov	r5, r0
		u32_t current_cycles = k_cycle_get_32();
    28f0:	f7fe fdb6 	bl	1460 <_timer_cycle_get_32>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    28f4:	1b40      	subs	r0, r0, r5
    28f6:	42a0      	cmp	r0, r4
    28f8:	d3fa      	bcc.n	28f0 <k_busy_wait+0x18>
}
    28fa:	bd38      	pop	{r3, r4, r5, pc}
    28fc:	000f4240 	.word	0x000f4240

00002900 <_impl_k_thread_start>:
{
    2900:	b510      	push	{r4, lr}
	__asm__ volatile(
    2902:	f04f 0320 	mov.w	r3, #32
    2906:	f3ef 8411 	mrs	r4, BASEPRI
    290a:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
    290e:	7b43      	ldrb	r3, [r0, #13]
    2910:	0759      	lsls	r1, r3, #29
    2912:	d402      	bmi.n	291a <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2914:	f384 8811 	msr	BASEPRI, r4
}
    2918:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    291a:	f023 0304 	bic.w	r3, r3, #4
    291e:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
    2920:	f7ff ffb8 	bl	2894 <_ready_thread>
	_reschedule(key);
    2924:	4620      	mov	r0, r4
}
    2926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    292a:	f7ff bdd9 	b.w	24e0 <_reschedule>
	...

00002930 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2930:	b530      	push	{r4, r5, lr}
    2932:	b087      	sub	sp, #28
    2934:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2936:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2938:	9504      	str	r5, [sp, #16]
    293a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    293c:	9503      	str	r5, [sp, #12]
    293e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    2940:	9502      	str	r5, [sp, #8]
    2942:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2944:	9501      	str	r5, [sp, #4]
    2946:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2948:	9500      	str	r5, [sp, #0]
    294a:	f7fe ff7d 	bl	1848 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    294e:	4b03      	ldr	r3, [pc, #12]	; (295c <_setup_new_thread+0x2c>)
    2950:	689b      	ldr	r3, [r3, #8]
    2952:	b103      	cbz	r3, 2956 <_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2956:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    2958:	b007      	add	sp, #28
    295a:	bd30      	pop	{r4, r5, pc}
    295c:	200005e8 	.word	0x200005e8

00002960 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    2960:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2962:	b510      	push	{r4, lr}
    2964:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2966:	b103      	cbz	r3, 296a <_k_thread_single_abort+0xa>
		thread->fn_abort();
    2968:	4798      	blx	r3
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    296a:	7b63      	ldrb	r3, [r4, #13]
    296c:	06da      	lsls	r2, r3, #27
    296e:	d10a      	bne.n	2986 <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
    2970:	6a22      	ldr	r2, [r4, #32]
    2972:	3201      	adds	r2, #1
    2974:	d107      	bne.n	2986 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    2976:	4620      	mov	r0, r4
    2978:	f7ff fd6a 	bl	2450 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    297c:	7b63      	ldrb	r3, [r4, #13]
    297e:	f043 0308 	orr.w	r3, r3, #8
    2982:	7363      	strb	r3, [r4, #13]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    2984:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    2986:	079b      	lsls	r3, r3, #30
    2988:	d502      	bpl.n	2990 <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    298a:	4620      	mov	r0, r4
    298c:	f7ff fd88 	bl	24a0 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    2990:	6a23      	ldr	r3, [r4, #32]
    2992:	3301      	adds	r3, #1
    2994:	d0f2      	beq.n	297c <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    2996:	f104 0018 	add.w	r0, r4, #24
    299a:	f000 f87f 	bl	2a9c <_abort_timeout>
    299e:	e7ed      	b.n	297c <_k_thread_single_abort+0x1c>

000029a0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    29a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    29a2:	4f23      	ldr	r7, [pc, #140]	; (2a30 <_init_static_threads+0x90>)
    29a4:	4d23      	ldr	r5, [pc, #140]	; (2a34 <_init_static_threads+0x94>)
{
    29a6:	b087      	sub	sp, #28
    29a8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    29aa:	42bd      	cmp	r5, r7
    29ac:	f105 0430 	add.w	r4, r5, #48	; 0x30
    29b0:	d314      	bcc.n	29dc <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    29b2:	4b21      	ldr	r3, [pc, #132]	; (2a38 <_init_static_threads+0x98>)
    29b4:	689a      	ldr	r2, [r3, #8]
    29b6:	7bd3      	ldrb	r3, [r2, #15]
    29b8:	3b01      	subs	r3, #1
    29ba:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    29bc:	f04f 0320 	mov.w	r3, #32
    29c0:	f3ef 8511 	mrs	r5, BASEPRI
    29c4:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    29c8:	4c1a      	ldr	r4, [pc, #104]	; (2a34 <_init_static_threads+0x94>)
    29ca:	42b4      	cmp	r4, r6
    29cc:	d323      	bcc.n	2a16 <_init_static_threads+0x76>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29ce:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    29d2:	b007      	add	sp, #28
    29d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    29d8:	f7ff bd9a 	b.w	2510 <k_sched_unlock>
		_setup_new_thread(
    29dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    29e0:	9305      	str	r3, [sp, #20]
    29e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    29e6:	9304      	str	r3, [sp, #16]
    29e8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    29ec:	9303      	str	r3, [sp, #12]
    29ee:	f854 3c18 	ldr.w	r3, [r4, #-24]
    29f2:	9302      	str	r3, [sp, #8]
    29f4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    29f8:	9301      	str	r3, [sp, #4]
    29fa:	f854 3c20 	ldr.w	r3, [r4, #-32]
    29fe:	9300      	str	r3, [sp, #0]
    2a00:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2a04:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2a08:	f7ff ff92 	bl	2930 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2a0c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2a10:	64dd      	str	r5, [r3, #76]	; 0x4c
    2a12:	4625      	mov	r5, r4
    2a14:	e7c9      	b.n	29aa <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    2a16:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2a18:	1c4b      	adds	r3, r1, #1
    2a1a:	d003      	beq.n	2a24 <_init_static_threads+0x84>
			schedule_new_thread(thread_data->init_thread,
    2a1c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    2a1e:	b919      	cbnz	r1, 2a28 <_init_static_threads+0x88>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    2a20:	f7ff ff6e 	bl	2900 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a24:	3430      	adds	r4, #48	; 0x30
    2a26:	e7d0      	b.n	29ca <_init_static_threads+0x2a>
    2a28:	f7ff ff12 	bl	2850 <schedule_new_thread.part.8>
    2a2c:	e7fa      	b.n	2a24 <_init_static_threads+0x84>
    2a2e:	bf00      	nop
    2a30:	200013ec 	.word	0x200013ec
    2a34:	200013ec 	.word	0x200013ec
    2a38:	200005e8 	.word	0x200005e8

00002a3c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    2a3c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    2a3e:	2300      	movs	r3, #0
    2a40:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
    2a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
    2a46:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    2a48:	7381      	strb	r1, [r0, #14]
    2a4a:	6203      	str	r3, [r0, #32]

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    2a4c:	4770      	bx	lr
	...

00002a50 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2a50:	4b03      	ldr	r3, [pc, #12]	; (2a60 <elapsed+0x10>)
    2a52:	681b      	ldr	r3, [r3, #0]
    2a54:	b90b      	cbnz	r3, 2a5a <elapsed+0xa>
    2a56:	f7fe bcaa 	b.w	13ae <z_clock_elapsed>
}
    2a5a:	2000      	movs	r0, #0
    2a5c:	4770      	bx	lr
    2a5e:	bf00      	nop
    2a60:	20000524 	.word	0x20000524

00002a64 <k_spin_lock.isra.1>:
	__asm__ volatile(
    2a64:	f04f 0320 	mov.w	r3, #32
    2a68:	f3ef 8011 	mrs	r0, BASEPRI
    2a6c:	f383 8811 	msr	BASEPRI, r3
    2a70:	4770      	bx	lr
	...

00002a74 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2a74:	6803      	ldr	r3, [r0, #0]
    2a76:	b140      	cbz	r0, 2a8a <remove_timeout+0x16>
    2a78:	4a07      	ldr	r2, [pc, #28]	; (2a98 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2a7a:	6852      	ldr	r2, [r2, #4]
    2a7c:	4290      	cmp	r0, r2
    2a7e:	d004      	beq.n	2a8a <remove_timeout+0x16>
	if (next(t) != NULL) {
    2a80:	b11b      	cbz	r3, 2a8a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2a82:	689a      	ldr	r2, [r3, #8]
    2a84:	6881      	ldr	r1, [r0, #8]
    2a86:	440a      	add	r2, r1
    2a88:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2a8a:	6842      	ldr	r2, [r0, #4]
    2a8c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2a8e:	605a      	str	r2, [r3, #4]
	t->dticks = _INACTIVE;
    2a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a94:	6083      	str	r3, [r0, #8]
}
    2a96:	4770      	bx	lr
    2a98:	20001384 	.word	0x20001384

00002a9c <_abort_timeout>:

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
}

int _abort_timeout(struct _timeout *to)
{
    2a9c:	b510      	push	{r4, lr}
    2a9e:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
    2aa0:	f7ff ffe0 	bl	2a64 <k_spin_lock.isra.1>
    2aa4:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
    2aa6:	6890      	ldr	r0, [r2, #8]
    2aa8:	1c43      	adds	r3, r0, #1
    2aaa:	d003      	beq.n	2ab4 <_abort_timeout+0x18>
			remove_timeout(to);
    2aac:	4610      	mov	r0, r2
    2aae:	f7ff ffe1 	bl	2a74 <remove_timeout>
			ret = 0;
    2ab2:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2ab4:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
    2ab8:	bd10      	pop	{r4, pc}
	...

00002abc <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    2abc:	4b13      	ldr	r3, [pc, #76]	; (2b0c <_get_next_timeout_expiry+0x50>)
    2abe:	781b      	ldrb	r3, [r3, #0]
{
    2ac0:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	bf14      	ite	ne
    2ac6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    2aca:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
    2ace:	f7ff ffc9 	bl	2a64 <k_spin_lock.isra.1>
	return list->head == list;
    2ad2:	4b0f      	ldr	r3, [pc, #60]	; (2b10 <_get_next_timeout_expiry+0x54>)
    2ad4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ad6:	429c      	cmp	r4, r3
    2ad8:	4606      	mov	r6, r0
    2ada:	d00a      	beq.n	2af2 <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    2adc:	b14c      	cbz	r4, 2af2 <_get_next_timeout_expiry+0x36>
    2ade:	68a5      	ldr	r5, [r4, #8]
    2ae0:	f7ff ffb6 	bl	2a50 <elapsed>
    2ae4:	1a28      	subs	r0, r5, r0
    2ae6:	2800      	cmp	r0, #0
    2ae8:	db0d      	blt.n	2b06 <_get_next_timeout_expiry+0x4a>
    2aea:	68a4      	ldr	r4, [r4, #8]
    2aec:	f7ff ffb0 	bl	2a50 <elapsed>
    2af0:	1a22      	subs	r2, r4, r0
    2af2:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2af6:	4b07      	ldr	r3, [pc, #28]	; (2b14 <_get_next_timeout_expiry+0x58>)
    2af8:	691b      	ldr	r3, [r3, #16]
    2afa:	b113      	cbz	r3, 2b02 <_get_next_timeout_expiry+0x46>
    2afc:	429a      	cmp	r2, r3
    2afe:	bfa8      	it	ge
    2b00:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2b02:	4610      	mov	r0, r2
    2b04:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    2b06:	2200      	movs	r2, #0
    2b08:	e7f3      	b.n	2af2 <_get_next_timeout_expiry+0x36>
    2b0a:	bf00      	nop
    2b0c:	20000528 	.word	0x20000528
    2b10:	20001384 	.word	0x20001384
    2b14:	200005e8 	.word	0x200005e8

00002b18 <_add_timeout>:
{
    2b18:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
    2b1a:	60c1      	str	r1, [r0, #12]
{
    2b1c:	4615      	mov	r5, r2
    2b1e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    2b20:	f7ff ffa0 	bl	2a64 <k_spin_lock.isra.1>
    2b24:	4606      	mov	r6, r0
		to->dticks = ticks + elapsed();
    2b26:	f7ff ff93 	bl	2a50 <elapsed>
	return list->head == list;
    2b2a:	4a16      	ldr	r2, [pc, #88]	; (2b84 <_add_timeout+0x6c>)
    2b2c:	6813      	ldr	r3, [r2, #0]
    2b2e:	2d01      	cmp	r5, #1
    2b30:	bfac      	ite	ge
    2b32:	1940      	addge	r0, r0, r5
    2b34:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b36:	4293      	cmp	r3, r2
    2b38:	60a0      	str	r0, [r4, #8]
    2b3a:	d001      	beq.n	2b40 <_add_timeout+0x28>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2b3c:	6855      	ldr	r5, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2b3e:	b933      	cbnz	r3, 2b4e <_add_timeout+0x36>
	node->prev = list->tail;
    2b40:	6853      	ldr	r3, [r2, #4]
    2b42:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2b44:	6853      	ldr	r3, [r2, #4]
	node->next = list;
    2b46:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
    2b48:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2b4a:	6054      	str	r4, [r2, #4]
    2b4c:	e00a      	b.n	2b64 <_add_timeout+0x4c>
			if (t->dticks > to->dticks) {
    2b4e:	6898      	ldr	r0, [r3, #8]
    2b50:	68a1      	ldr	r1, [r4, #8]
    2b52:	4288      	cmp	r0, r1
    2b54:	dd0f      	ble.n	2b76 <_add_timeout+0x5e>
		node->prev = insert_point->prev;
    2b56:	685a      	ldr	r2, [r3, #4]
				t->dticks -= to->dticks;
    2b58:	1a41      	subs	r1, r0, r1
    2b5a:	6099      	str	r1, [r3, #8]
		node->next = insert_point;
    2b5c:	e9c4 3200 	strd	r3, r2, [r4]
		insert_point->prev->next = node;
    2b60:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    2b62:	605c      	str	r4, [r3, #4]
    2b64:	f386 8811 	msr	BASEPRI, r6
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    2b68:	f7ff ffa8 	bl	2abc <_get_next_timeout_expiry>
    2b6c:	2100      	movs	r1, #0
}
    2b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    2b72:	f7fe bc1b 	b.w	13ac <z_clock_set_timeout>
			to->dticks -= t->dticks;
    2b76:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2b78:	429d      	cmp	r5, r3
    2b7a:	60a1      	str	r1, [r4, #8]
    2b7c:	d0e0      	beq.n	2b40 <_add_timeout+0x28>
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	e7dd      	b.n	2b3e <_add_timeout+0x26>
    2b82:	bf00      	nop
    2b84:	20001384 	.word	0x20001384

00002b88 <z_clock_announce>:
{
    2b88:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	announce_remaining = ticks;
    2b8c:	4d21      	ldr	r5, [pc, #132]	; (2c14 <z_clock_announce+0x8c>)
	return list->head == list;
    2b8e:	4e22      	ldr	r6, [pc, #136]	; (2c18 <z_clock_announce+0x90>)
					curr_tick += t->dticks;
    2b90:	4f22      	ldr	r7, [pc, #136]	; (2c1c <z_clock_announce+0x94>)
{
    2b92:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b94:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
    2b98:	f7ff fd46 	bl	2628 <z_time_slice>
	announce_remaining = ticks;
    2b9c:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
    2b9e:	f7ff ff61 	bl	2a64 <k_spin_lock.isra.1>
	return list->head == list;
    2ba2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ba4:	42b4      	cmp	r4, r6
    2ba6:	4681      	mov	r9, r0
    2ba8:	d01c      	beq.n	2be4 <z_clock_announce+0x5c>
			if (t != NULL) {
    2baa:	b194      	cbz	r4, 2bd2 <z_clock_announce+0x4a>
				if (t->dticks <= announce_remaining) {
    2bac:	68a1      	ldr	r1, [r4, #8]
    2bae:	682b      	ldr	r3, [r5, #0]
    2bb0:	4299      	cmp	r1, r3
    2bb2:	dc15      	bgt.n	2be0 <z_clock_announce+0x58>
					announce_remaining -= t->dticks;
    2bb4:	1a5b      	subs	r3, r3, r1
    2bb6:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
    2bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
    2bbc:	eb12 0b01 	adds.w	fp, r2, r1
    2bc0:	eb43 7ce1 	adc.w	ip, r3, r1, asr #31
					t->dticks = 0;
    2bc4:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
    2bc8:	4620      	mov	r0, r4
					curr_tick += t->dticks;
    2bca:	e9c7 bc00 	strd	fp, ip, [r7]
					remove_timeout(t);
    2bce:	f7ff ff51 	bl	2a74 <remove_timeout>
    2bd2:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
    2bd6:	b13c      	cbz	r4, 2be8 <z_clock_announce+0x60>
		t->fn(t);
    2bd8:	68e3      	ldr	r3, [r4, #12]
    2bda:	4620      	mov	r0, r4
    2bdc:	4798      	blx	r3
		LOCKED(&timeout_lock) {
    2bde:	e7de      	b.n	2b9e <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
    2be0:	1ac9      	subs	r1, r1, r3
    2be2:	60a1      	str	r1, [r4, #8]
    2be4:	2400      	movs	r4, #0
    2be6:	e7f4      	b.n	2bd2 <z_clock_announce+0x4a>
		curr_tick += announce_remaining;
    2be8:	4e0c      	ldr	r6, [pc, #48]	; (2c1c <z_clock_announce+0x94>)
	LOCKED(&timeout_lock) {
    2bea:	f7ff ff3b 	bl	2a64 <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
    2bee:	e9d6 2300 	ldrd	r2, r3, [r6]
    2bf2:	6829      	ldr	r1, [r5, #0]
		announce_remaining = 0;
    2bf4:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
    2bf6:	1857      	adds	r7, r2, r1
    2bf8:	eb43 78e1 	adc.w	r8, r3, r1, asr #31
    2bfc:	e9c6 7800 	strd	r7, r8, [r6]
    2c00:	f380 8811 	msr	BASEPRI, r0
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    2c04:	f7ff ff5a 	bl	2abc <_get_next_timeout_expiry>
    2c08:	4621      	mov	r1, r4
}
    2c0a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    2c0e:	f7fe bbcd 	b.w	13ac <z_clock_set_timeout>
    2c12:	bf00      	nop
    2c14:	20000524 	.word	0x20000524
    2c18:	20001384 	.word	0x20001384
    2c1c:	20000530 	.word	0x20000530

00002c20 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    2c20:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
    2c24:	f7ff ff1e 	bl	2a64 <k_spin_lock.isra.1>
    2c28:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
    2c2a:	f7fe fbc0 	bl	13ae <z_clock_elapsed>
    2c2e:	4b06      	ldr	r3, [pc, #24]	; (2c48 <z_tick_get+0x28>)
    2c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c34:	eb12 0b00 	adds.w	fp, r2, r0
    2c38:	f143 0c00 	adc.w	ip, r3, #0
    2c3c:	4658      	mov	r0, fp
    2c3e:	4661      	mov	r1, ip
    2c40:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
    2c44:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    2c48:	20000530 	.word	0x20000530

00002c4c <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
#else
	return (u32_t)curr_tick;
#endif
}
    2c4c:	4b01      	ldr	r3, [pc, #4]	; (2c54 <z_tick_get_32+0x8>)
    2c4e:	6818      	ldr	r0, [r3, #0]
    2c50:	4770      	bx	lr
    2c52:	bf00      	nop
    2c54:	20000530 	.word	0x20000530

00002c58 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    2c58:	4770      	bx	lr
